


Network Working Group                               E. Hammer-Lahav, Ed.
Internet-Draft                                                    Yahoo!
Intended status: Standards Track                             D. Recordon
Expires: October 14, 2010                                       Facebook
                                                                D. Hardt
                                                          April 12, 2010


                         The OAuth 2.0 Protocol
                          draft-ietf-oauth-00

Abstract

   This specification describes the OAuth 2.0 protocol.  OAuth provides
   a method for making authenticated HTTP requests using a token - an
   identifier used to denote an access grant with specific scope,
   duration, and other attributes.  Tokens are issued to third-party
   clients by an authorization server with the approval of the resource
   owner.  OAuth defines multiple flows for obtaining a token to support
   a wide range of client types and user experience.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 14, 2010.

Copyright Notice

   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Hammer-Lahav, et al.    Expires October 14, 2010                [Page 1]

Internet-Draft                  OAuth 2.0                     April 2010


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.















































Hammer-Lahav, et al.    Expires October 14, 2010                [Page 2]

Internet-Draft                  OAuth 2.0                     April 2010


Table of Contents

   1.  Authors  . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  5
     2.2.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3.  Example  . . . . . . . . . . . . . . . . . . . . . . . . .  8
     2.4.  Notational Conventions . . . . . . . . . . . . . . . . . .  8
     2.5.  Conformance  . . . . . . . . . . . . . . . . . . . . . . .  8
   3.  Obtaining an Access Token  . . . . . . . . . . . . . . . . . .  8
     3.1.  Authorization Endpoint . . . . . . . . . . . . . . . . . .  9
     3.2.  Flow Parameters  . . . . . . . . . . . . . . . . . . . . .  9
     3.3.  Client Credentials . . . . . . . . . . . . . . . . . . . .  9
     3.4.  User Delegation Flows  . . . . . . . . . . . . . . . . . . 10
       3.4.1.  Web Callback Flow  . . . . . . . . . . . . . . . . . . 10
       3.4.2.  Native Application Flow  . . . . . . . . . . . . . . . 16
       3.4.3.  User-Agent Flow  . . . . . . . . . . . . . . . . . . . 21
       3.4.4.  Device Flow  . . . . . . . . . . . . . . . . . . . . . 25
     3.5.  End User Credentials Flows . . . . . . . . . . . . . . . . 31
       3.5.1.  Username and Password Flow . . . . . . . . . . . . . . 31
     3.6.  Autonomous Client Flows  . . . . . . . . . . . . . . . . . 34
       3.6.1.  Client Credentials Flow  . . . . . . . . . . . . . . . 34
       3.6.2.  Assertion Flow . . . . . . . . . . . . . . . . . . . . 36
   4.  Refreshing an Access Token . . . . . . . . . . . . . . . . . . 38
   5.  Accessing a Protected Resource . . . . . . . . . . . . . . . . 41
     5.1.  Bearer Token Requests  . . . . . . . . . . . . . . . . . . 42
       5.1.1.  URI Query Parameter  . . . . . . . . . . . . . . . . . 42
       5.1.2.  Form-Encoded Body Parameter  . . . . . . . . . . . . . 43
     5.2.  The Authorization Request Header . . . . . . . . . . . . . 44
       5.2.1.  Cryptographic Tokens . . . . . . . . . . . . . . . . . 45
   6.  Identifying a Protected Resource . . . . . . . . . . . . . . . 47
     6.1.  The WWW-Authenticate Response Header . . . . . . . . . . . 48
       6.1.1.  The 'realm' Attribute  . . . . . . . . . . . . . . . . 48
       6.1.2.  The 'authorization-uri' Attribute  . . . . . . . . . . 48
       6.1.3.  The 'algorithms' Attribute . . . . . . . . . . . . . . 48
       6.1.4.  The 'error' Attribute  . . . . . . . . . . . . . . . . 48
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 48
   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 48
   9.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 49
   Appendix A.  Differences from OAuth 1.0a . . . . . . . . . . . . . 49
   Appendix B.  Document History  . . . . . . . . . . . . . . . . . . 49
   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 49
     10.1. Normative References . . . . . . . . . . . . . . . . . . . 49
     10.2. Informative References . . . . . . . . . . . . . . . . . . 50
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 50






Hammer-Lahav, et al.    Expires October 14, 2010                [Page 3]

Internet-Draft                  OAuth 2.0                     April 2010


1.  Authors

   This specification was authored with the participation and based on
   the work of Allen Tom (Yahoo!), Brian Eaton (Google), Brent Goldman
   (Facebook), Luke Shepard (Facebook), Raffi Krikorian (Twitter), and
   Yaron Goland (Microsoft).


2.  Introduction

   With the increasing use of distributed web services and cloud
   computing, third-party applications require access to server-hosted
   resources.  These resources are usually private and require
   authentication using the resource owner's credentials (typically a
   username and password).  In the traditional client-server
   authentication model, a client accessing a protected resource on a
   server presents the resource owner's credentials in order to
   authenticate and gain access.

   Resource owners should not be required to share their credentials
   when granting third-party applications access to their protected
   resources.  They should also have the ability to restrict access to a
   limited subset of the resources they control, to limit access
   duration, or to limit access to the methods supported by these
   resources.

   OAuth provides a method for making authenticated HTTP requests using
   a token - an identifier used to denote an access grant with specific
   scope, duration, and other attributes.  Tokens are issued to third-
   party clients by an authorization server with the approval of the
   resource owner.  Instead of sharing their credentials with the
   client, resource owners grant access by authenticating directly with
   the authorization server which in turn issues a token to the client.
   The client uses the token (and optional secret) to authenticate with
   the resource server and gain access.

   For example, a web user (resource owner) can grant a printing service
   (client) access to her private photos stored at a photo sharing
   service (resource server), without sharing her username and password
   with the printing service.  Instead, she authenticates directly with
   the photo sharing service (authorization server) which issues the
   printing service delegation-specific credentials (token).

   The use of OAuth with any other transport protocol than HTTP
   [RFC2616] is undefined.






Hammer-Lahav, et al.    Expires October 14, 2010                [Page 4]

Internet-Draft                  OAuth 2.0                     April 2010


2.1.  Terminology

   resource server
         An HTTP [RFC2616] server capable of accepting authenticated
         resource requests using the OAuth protocol.

   protected resource
         An access-restricted resource which can be obtained from a
         resource server using an OAuth-authenticated request.

   client
         An HTTP client capable of making authenticated requests for
         protected resources using the OAuth protocol.

   resource owner
         An entity capable of granting access to a protected resource.

   end user
         A human resource owner.

   access token
         A unique identifier used by the client to make authenticated
         requests on behalf of the resource owner.  Access tokens may
         have a matching secret.

   authorization server
         An HTTP server capable of issuing tokens after successfully
         authenticating the resource owner and obtaining authorization.
         The authorization server may be the same server as the resource
         server, or a separate entity.

   authorization endpoint
         The authorization server's HTTP endpoint capable of
         authenticating the resource owner, obtaining authorization,
         issuing tokens, and refreshing expired tokens.

   client identifier
         An unique identifier issued by the client to identify itself to
         the authorization server.  Client identifiers may have a
         matching secret.

   refresh token
         A unique identifier used by the client to replace an expired
         access token with a new access token without having to involve
         the resource owner.  A refresh token is used when the access
         token is valid for a shorter time period than the duration of
         the access grant approved by the resource owner.




Hammer-Lahav, et al.    Expires October 14, 2010                [Page 5]

Internet-Draft                  OAuth 2.0                     April 2010


2.2.  Overview

   Clients interact with a protected resource, first by requesting
   access (which is granted in the form of an access token) from the
   authorization server, and then by authenticating with the resource
   server by presenting the access token.  Figure 1 demonstrates the
   flow between the client and authorization server (A, B), and the flow
   between the client and resource server (C, D), when the client is
   acting autonomously (the client is also the resource owner).

     +---+                                  +---------------+
     |   |--(A)------ Credentials --------->| Authorization |
     | C |                                  |    Server     |
     | l |<-(B)------ Access Token ---------|               |
     | i |      (w/ Optional Refresh Token) +---------------+
     | e |
     | n |            HTTP Request          +---------------+
     | t |--(C)--- with Access Token ------>|    Resource   |
     |   |                                  |     Server    |
     |   |<-(D)------ HTTP Response --------|               |
     +---+                                  +---------------+


                                 Figure 1

   Access token strings can use any internal structure agreed upon
   between the authorization server and the resource server, but their
   structure is opaque to the client.  Since the access token provides
   the client access to the protected resource for the life of the
   access token (or under revoked), the authorization server should
   issue access tokens which expire within an appropriate time, usually
   much shorter than the duration of the access grant.

   When an access token expires, the client can request a new access
   token from the authorization server by presenting its credentials
   again (Figure 1), or by using the refresh token (if issued with the
   access token) as shown in Figure 2.  Once an expired access token has
   been replaced with a new access token (A, B), the client uses the new
   access token as before (C, D).












Hammer-Lahav, et al.    Expires October 14, 2010                [Page 6]

Internet-Draft                  OAuth 2.0                     April 2010


     +---+                                  +---------------+
     |   |--(A)------ Refresh Token ------->| Authorization |
     | C |                                  |    Server     |
     | l |<-(B)------ Access Token ---------|               |
     | i |                                  +---------------+
     | e |
     | n |            HTTP Request          +---------------+
     | t |--(C)--- with Access Token ------>|    Resource   |
     |   |                                  |     Server    |
     |   |<-(D)----- HTTP Response ---------|               |
     +---+                                  +---------------+


                                 Figure 2

   This specification defines a number of authorization flows to support
   different client types and scenarios.  These authorization flows can
   be separated into three groups: user delegation flows where the
   client is acting on behalf of an end user, end user credentials flows
   where the client uses the end user's credentials directly to obtain
   authorization, and autonomous flows where the client is acting for
   itself (the client is also the resource owner).

   Additional authorization flows may be defined by other specifications
   to cover different scenarios and client types.

   The user delegation authorization flows defined by this
   specifications are:

   o  Web Callback Flow - This flow is optimized for cases where the
      client is part of a web server application.  This flow is
      described in Section 3.4.1.

   o  Native Application Flow - This flow is use by clients running as
      native code on the end user's computer or device outside a user-
      agent.  This flow is described in Section 3.4.2.

   o  User-Agent Flow - This flow is designed for clients running inside
      a user-agent (typically a web browser), and therefore cannot
      receive callbacks from the authorization server.  This flow is
      described in Section 3.4.3.

   o  Device Flow - This flow suitable for clients executing on limited
      devices, but where the end user has separate access to a user-
      agent on another computer or device.  This flow is described in
      Section 3.4.4.

   The end user credentials flow defined by this specification is:



Hammer-Lahav, et al.    Expires October 14, 2010                [Page 7]

Internet-Draft                  OAuth 2.0                     April 2010


   o  Username and Password Flow - This flow is used in cases where the
      end user trusts the client to handle its credentials but it is
      still undesirable for the client to store the end user's username
      and password.  This flow is described in Section 3.5.1.

   The autonomous authorization flows defined by this specifications
   are:

   o  Client Credentials Flow - The client uses its credentials to
      obtain an access token.  This flow is described in Section 3.6.1.

   o  Assertion Flow - The client presents an assertion such as a SAML
      [OASIS.saml-core-2.0-os] assertion to the authorization server in
      exchange for an access token.  This flow is described in
      Section 3.6.2.

2.3.  Example

   [[ Todo ]]

2.4.  Notational Conventions

   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   document are to be interpreted as described in [RFC2119].

   This document uses the Augmented Backus-Naur Form (ABNF) notation of
   [I-D.ietf-httpbis-p1-messaging].  Additionally, the realm and auth-
   param rules are included from [RFC2617], and the URI-Reference rule
   from [RFC3986].

2.5.  Conformance

   An implementation is not compliant if it fails to satisfy one or more
   of the MUST or REQUIRED level requirements for the flows it
   implements.  An implementation that satisfies all the MUST or
   REQUIRED level and all the SHOULD level requirements for its flows is
   said to be "unconditionally compliant"; one that satisfies all the
   MUST level requirements but not all the SHOULD level requirements for
   its flows is said to be "conditionally compliant."


3.  Obtaining an Access Token

   The client obtains an access token by using one of the authorization
   flows supported by the authorization server.  The authorization flows
   all use the same authorization endpoint, each with a different set of
   request parameters and values.



Hammer-Lahav, et al.    Expires October 14, 2010                [Page 8]

Internet-Draft                  OAuth 2.0                     April 2010


   When issuing an access token, the authorization server MUST retain
   the scope, duration, and other access attributes granted by the
   resource owner, and enforce these restrictions when receiving a
   protected resource request made with the access token issued.

   In many cases it is desirable to issue access tokens with a shorter
   lifetime than the duration of the authorization grant.  However, it
   is undesirable to require the resource owner to authorize the request
   again.  Instead, the authorization server issues a refresh token in
   addition to the access token.  When the access token expires, the
   client can request a new access token without involving the resource
   owner as long as the authorization grant is still valid.  The token
   refresh method is described in Section 4.

3.1.  Authorization Endpoint

   The client obtains the URI of the authorization endpoint from the
   server's documentation, or by making an unauthorized protected
   resource request (from the "WWW-Authenticate" response header
   authorization-uri (Section 6.1.2) attribute).

   The authorization endpoint advertised by the server MUST NOT include
   a query or fragment components as defined by [RFC3986] section 3.

   Since requests to the authorization endpoint result in the
   transmission of plain text credentials in the HTTP request and
   response, the authorization server MUST require the use of a
   transport-layer mechanism such as TLS or SSL (or a secure channel
   with equivalent protections) when sending requests to the
   authorization endpoints.

3.2.  Flow Parameters

   Clients should avoid making assumptions about the size of tokens and
   other server-generated values, which are left undefined by this
   specification.  Servers should document the expected size of any
   value they issue.

3.3.  Client Credentials

   When requesting access from the authorization server, the client
   identifies itself using its authorization-server-issued client
   credentials.  The client credentials include a client identifier and
   an OPTIONAL symmetric shared secret.  The means through which the
   client obtains these credentials are beyond the scope of this
   specification, but usually involve registration with the
   authorization server.




Hammer-Lahav, et al.    Expires October 14, 2010                [Page 9]

Internet-Draft                  OAuth 2.0                     April 2010


   The client identifier is used by the authorization server to
   establish the identity of the client for the purpose of presenting
   information to the resource owner prior to granting access, as well
   as for providing different service levels to different clients.  They
   can also be used to block unauthorized clients from requesting
   access.

   Due to the nature of some clients, authorization servers SHOULD NOT
   make assumptions about the confidentiality of client credentials
   without establishing trust with the client operator.  Servers SHOULD
   NOT issue client secrets to the client incapable or keeping their
   secrets confidential.

3.4.  User Delegation Flows

   User delegation flows are used to grant client access to protected
   resources by the end user without sharing the end user credentials
   (typically a username and password) with the client.  Instead, the
   end user authenticates directly with the authorization server, and
   grants client access to its protected resources.

3.4.1.  Web Callback Flow

   The web callback flow is a user delegation flow suitable for clients
   capable of interacting with the end user's user-agent (typically a
   web browser) and capable of receiving callback requests from the
   server (capable of acting as an HTTP server).

     +----------+         Client Identifier       +---------------+
     |         -+----(A)-- & Callback URI ------->|               |
     | End User |                                 | Authorization |
     |    at    |<---(B)-- User authenticates --->|     Server    |
     | Browser  |                                 |               |
     |         -+----(C)-- Verification Code ----<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (A)  (C)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(D)-- Client Credentials, --------'      |
     |   Web   |           Verification Code,                |
     |  Client |            & Callback URI                   |
     |         |                                             |
     |         |<---(E)------- Access Token -----------------'
     +---------+        (w/ Optional Refresh Token)





Hammer-Lahav, et al.    Expires October 14, 2010               [Page 10]

Internet-Draft                  OAuth 2.0                     April 2010


                                 Figure 3

   The web callback flow illustrated in Figure 3 includes the following
   steps:

   (A)  The web client initiates the flow by redirecting the end user's
        user-agent to the authorization endpoint with its client
        identifier and a callback URI to which the server will send the
        end user back once authorization is received (or denied).

   (B)  The authorization server authenticates the end user (via the
        user-agent) and establishes whether the end user grants or
        denies the client's access request.

   (C)  Assuming the end user granted access, the authorization server
        redirects the user-agent back to the client to the callback URI
        provided earlier.  The authorization includes a verification
        code for the client to use to obtain an access token.

   (D)  The client requests an access token from the authorization
        server by including its client credentials (identifier and
        secret), as well as the verification code received in the
        previous step.

   (E)  The authorization server validates the client credentials and
        the verification code and responds back with the access token.

3.4.1.1.  Client Requests Authorization

   In order for the end user to grant the client access, the client
   sends the end user to the authorization server.  The client
   constructs the request URI by adding the following URI query
   parameters to the user authorization endpoint URI:

   type
         REQUIRED.  The parameter value MUST be set to
         "web_callback_access_request" (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   callback
         An absolute URI to which the authorization server will redirect
         the end user back when the end user authorization step is
         completed.  The authorization server MAY require the client to
         pre-register their callback URI.  The callback URI MUST NOT
         includes a query or a fragment components as defined by
         [RFC3986] section 3.  REQUIRED unless a callback URI has been



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 11]

Internet-Draft                  OAuth 2.0                     April 2010


         established between the client and authorization server via
         other means.

   state
         OPTIONAL.  An opaque value used by the client to maintain state
         between the request and callback.

   immediate
         OPTIONAL.  The parameter value must be set to "true" or "false"
         (case sensitive).  If set to "true", the authorization server
         MUST NOT prompt the end user to authenticate or approve access.
         Instead, the authorization server attempts to establish the end
         user's identity via other means (e.g. browser cookies) and
         checks if the end user has previously approved an identical
         access request by the same client and if that access grant is
         still active.  If the authorization server does not support an
         immediate check or if it is unable to establish the end user's
         identity or approval status, it MUST deny the request without
         prompting the end user.  Defaults to "false" if omitted.

   The client directs the end user to the constructed URI using an HTTP
   redirection response, or by other means available to it via the end
   user's user-agent.  The request MUST use the HTTP "GET" method.

   For example, the client directs the end user's user-agent to make the
   following HTTPS requests (line breaks are for display purposes only):

     GET /authorize?type=web_callback_access_request&client_id=
         s6BhdRkqt3&callback=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
          HTTP/1.1
     Host: server.example.com


   If the client has previously registered a callback URI with the
   authorization server, the authorization server MUST verify that the
   callback URI received matches the registered URI associated with the
   client identifier.

   The way in which the server authenticates the end user (e.g. username
   and password login, OpenID, session cookies) and in which the server
   obtains the end user's authorization, including whether it uses a
   secure channel such as TLS/SSL, is beyond the scope of this
   specification.  However, the server MUST first verify the identity of
   the end user.

   After receiving (or establishing via other means) an authorization
   decision from the end user, the authorization server sends the end
   user's user-agent to the provided client callback URI using an HTTP



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 12]

Internet-Draft                  OAuth 2.0                     April 2010


   redirection response, or by other means available to it via the end
   user's user-agent.

3.4.1.1.1.  End User Grants Authorization

   If the end user authorizes the access request, the authorization
   server generates a verification code and associates it with the
   client identifier and callback URI.  The authorization server
   constructs the request URI by adding the following parameters to the
   query component of callback URI provided by the client:

   code
         REQUIRED.  The verification code generated by the authorization
         server.

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   The verification code SHOULD expire shortly after it is issued and
   allowed for a single use.

   For example, the server redirects the end user's user-agent by
   sending the following HTTP response:

     HTTP/1.1 302 Found
     Location: https://client.example.com/cb?code=i1WsRn1uB1


   In turn, the end user's user-agent makes the following HTTPS "GET"
   request:

     GET /cb?code=i1WsRn1uB1 HTTP/1.1
     Host: client.example.com


3.4.1.1.2.  End User Denies Authorization

   If the end user denied the access request, the authorization server
   constructs the request URI by adding the following parameters to the
   query component of callback URI provided by the client:

   error
         REQUIRED.  The parameter value MUST be set to "user_denied"
         (case sensitive).





Hammer-Lahav, et al.    Expires October 14, 2010               [Page 13]

Internet-Draft                  OAuth 2.0                     April 2010


   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   For example, the authorization server directs the client to make the
   following HTTP request:

     GET /cb?error=user_denied HTTP/1.1
     Host: client.example.com


   The authorization flow concludes unsuccessfully.

3.4.1.2.  Client Requests Access Token

   The client obtains an access token from the authorization server by
   making an HTTP "POST" request to the authorization endpoint.  The
   client constructs a request URI by adding the following REQUIRED
   parameters to the request:

   type
         The parameter value MUST be set to "web_callback_token_request"
         (case sensitive).

   client_id
         The client identifier as described in Section 3.3.

   client_secret
         The client secret as described in Section 3.3.

   code
         The verification code received from the authorization server.

   callback
         The callback URI used in the initial request.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     POST /authorize HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     type=web_callback_token_request&client_id=s6BhdRkqt3&
     client_secret=gX1fBat3bV&code=i1WsRn1uB1&
     callback=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 14]

Internet-Draft                  OAuth 2.0                     April 2010


   The authorization server MUST verify that the verification code,
   client identity, client secret, and callback URI are all valid and
   match its stored association.  If the request is valid, the
   authorization server issues an access token and delivers it to the
   client in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).

   The response contains the following parameters:

   access_token
         REQUIRED.  The access token issued by the authorization server.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   refresh_token
         OPTIONAL.  The refresh token used to obtain new access tokens
         using the same end user access grant as described in Section 4.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=SlAV32hkKG&expires_in=3600&refresh_token=8xLOxBtZp8


   If the request is invalid, the authorization server returns an error
   message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).

   The response contains the following parameter:

   error
         OPTIONAL.  The parameter value MUST be set to either
         "callback_mismatch" or "expired_verification_code" (case
         sensitive).

   For example:

     HTTP/1.1 400 Bad Request
     Content-Type: application/x-www-form-urlencoded

     error=expired_verification_code




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 15]

Internet-Draft                  OAuth 2.0                     April 2010


3.4.2.  Native Application Flow

   The native application flow is a user delegation flow suitable for
   client applications running as native code on the end user's computer
   or device (i.e. executing outside a browser).  The client is capable
   of interacting with the end user's user-agent but is incapable of
   receiving callback requests from the server (incapable of acting as
   an HTTP server).

   The native application flow is similar to the web callback flow
   (Section 3.4.1) but instead of using a callback to deliver the
   verification code to the client, the authorization server displays
   the verification code to the end user via its user-agent.  If the
   client is able to interact with the user-agent, it retrieves the
   verification code automatically.  Otherwise, the end user manually
   enters the verification code into a client dialog.

   This flow does not utilize the client secret since the client code
   resides on the end user's computer or device which makes the client
   secret accessible and exploitable.  Because the client is incapable
   of receiving callbacks, the access token is encoded into the HTML
   response which exposes it to the end user and other applications
   residing on the computer or device.

     +----------+                                 +---------------+
     |         -+----(A)-- Client Identifier ---->|               |
     | End User |                                 | Authorization |
     |    at    |<---(B)-- User authenticates --->|     Server    |
     | Browser  |                                 |               |
     |          |<---(C)-- Verification Code ----<|               |
     +-|--------+                                 +---------------+
       |    v                                         ^      v
       |    :                                         |      |
      (A)  (D)                                        |      |
       |    :                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |  Native |>---(E)-- Verification Code ----------'      |
     |   App   |                                             |
     |  Client |<---(F)--------- Access Token ---------------'
     +---------+          (w/ Optional Refresh Token)


                                 Figure 4

   The native application flow illustrated in Figure 4 includes the
   following steps:




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 16]

Internet-Draft                  OAuth 2.0                     April 2010


   (A)  The native application client initiates the flow by opening a
        user-agent on the end user's computer or device to the
        authorization endpoint with its client identifier.

   (B)  The authorization server authenticates the end user (via the
        user-agent) and establishes whether the end user grants or
        denies the client's access request.

   (C)  Assuming the end user granted access, the authorization server
        display the verification code by returning an HTML document to
        the user-agent with the verification code included in the
        documents's title and body.

   (D)  The client interacts with the user-agent and obtains the
        verification code from the title of the web page displayed by
        the user-agent.  If the client is unable to interact with the
        user-agent, the end user manually copies the verification code
        from the user-agent into an interface provided by the client.

   (E)  The client requests an access token from the authorization
        server by sending the verification code received in the previous
        step.

   (F)  The authorization server validates the verification code and
        responds back with the access token.

3.4.2.1.  Client Requests Authorization

   In order for the end user to grant the client access, the client
   sends the end user to the authorization server.  The client
   constructs the request URI by adding the following URI query
   parameters to the user authorization endpoint URI:

   type
         REQUIRED.  The parameter value MUST be set to
         "native_app_access_request" (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   state
         OPTIONAL.  An opaque value used by the client to maintain state
         between the request and callback.

   The client launches a user-agent on the end user's computer or
   device, and directs it to the constructed URI.  The request MUST use
   the HTTP "GET" method.




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 17]

Internet-Draft                  OAuth 2.0                     April 2010


   For example, the client directs the end user's user-agent to make the
   following HTTPS requests (line breaks are for display purposes only):

     GET /authorize?type=native_app_access_request&client_id=
         s6BhdRkqt3 HTTP/1.1
     Host: server.example.com


   The way in which the server authenticates the end user (e.g. username
   and password login, OpenID, session cookies) and in which the server
   obtains the end user's authorization, including whether it uses a
   secure channel such as TLS/SSL, is beyond the scope of this
   specification.  However, the server MUST first verify the identity of
   the end user.

   After receiving (or establishing via other means) an authorization
   decision from the end user, the authorization server responds with an
   HTML document containing machine-readable parameters and human-
   readable instructions.

3.4.2.1.1.  End User Grants Authorization

   If the end user authorizes the access request, the authorization
   server generates a verification code and associates it with the
   client identifier.  The authorization server generates an HTML
   [W3C.REC-html40-19980424] document response with the following
   parameters encoded into the document's title:

   code
         REQUIRED.  The verification code generated by the authorization
         server.

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   The parameters are encoded into the document's title by serializing
   them using the "application/x-www-form-urlencoded" content type as
   defined by [W3C.REC-html40-19980424], and appending the string to the
   content of the HTML "<title>" element enclosed in parenthesis "()".
   The document is returned in the HTTP response body with a 200 status
   code (OK).

   For example:

     <title>Authorization Granted (code=i1WsRn1uB1)</title>




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 18]

Internet-Draft                  OAuth 2.0                     April 2010


   The verification code SHOULD expire shortly after it is issued and
   allowed for a single use.

   The document's content MUST include the parameters in a human-
   readable form and SHOULD include instructions to assist the end user
   in manually entering the values into the client applications (in case
   it is unable to automatically retrieve them).

3.4.2.1.2.  End User Denies Authorization

   If the end user denied the access request, the authorization server
   generates an HTML [W3C.REC-html40-19980424] document response with
   the following parameters encoded into the document's title:

   error
         REQUIRED.  The parameter value MUST be set to "user_denied"
         (case sensitive).

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   The parameters are encoded into the document's title by serializing
   them using the "application/x-www-form-urlencoded" content type as
   defined by [W3C.REC-html40-19980424], and appending the string to the
   content of the HTML "<title>" element enclosed in parenthesis "()".
   The document is returned in the HTTP response body with a 401 status
   code (Unauthorized).

   For example:

     <title>Authorization Denied (error=user_denied)</title>


   The authorization flow concludes unsuccessfully.

3.4.2.2.  Client Requests Access Token

   The client obtains an access token from the authorization server by
   making an HTTP "POST" request to the authorization endpoint.  The
   client constructs a request URI by adding the following REQUIRED
   parameters to the request:

   type
         The parameter value MUST be set to "native_app_token_request"
         (case sensitive).




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 19]

Internet-Draft                  OAuth 2.0                     April 2010


   client_id
         The client identifier as described in Section 3.3.

   code
         The verification code received from the authorization server.

   For example, the client makes the following HTTPS request:

     POST /authorize HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     type=native_app_token_request&client_id=s6BhdRkqt3&code=i1WsRn1uB1


   The authorization server MUST verify that the verification code,
   client identity, client secret, and callback URI are all valid and
   match its stored association.  If the request is valid, the
   authorization server issues an access token and delivers it to the
   client in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).

   The response contains the following parameters:

   access_token
         REQUIRED.  The access token issued by the authorization server.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   refresh_token
         OPTIONAL.  The refresh token used to obtain new access tokens
         using the same end user access grant as described in Section 4.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=SlAV32hkKG&expires_in=3600&refresh_token=8xLOxBtZp8


   If the request is invalid, the authorization server returns an error
   message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 20]

Internet-Draft                  OAuth 2.0                     April 2010


   The response contains the following parameter:

   error
         OPTIONAL.  The parameter value MUST be set to
         "expired_verification_code" (case sensitive).

   For example:

     HTTP/1.1 400 Bad Request
     Content-Type: application/x-www-form-urlencoded

     error=expired_verification_code


3.4.3.  User-Agent Flow

   The user-agent flow is a user delegation flow suitable for client
   applications residing in a user-agent, typically implemented in a
   browser using a scripting language such as JavaScript.  The client is
   capable of interacting with the end user's user-agent but is
   incapable of receiving callback requests from the server (incapable
   of acting as an HTTP server).

   Instead of receiving callbacks, the client requests the authorization
   server to redirect the user-agent to another web server or local
   resource accessible to the browser which is capable of extracting the
   access token from the response and passing it to the client.

   This user-agent flow does not utilize the client secret since the
   client code resides on the end user's computer or device which makes
   the client secret accessible and exploitable.  Because the client is
   incapable of receiving callbacks, the access token is encoded into
   the redirection URI which exposes it to the end user and other
   applications residing on the computer or device.

















Hammer-Lahav, et al.    Expires October 14, 2010               [Page 21]

Internet-Draft                  OAuth 2.0                     April 2010


          +----------+          Client Identifier     +----------------+
          |          |>---(A)-- & Redirection URI --->|                |
          |          |                                |                |
   End <--+  -  -  - +----(B)-- User authenticates -->|  Authorization |
   User   |          |                                |     Server     |
          |          |<---(C)-- Redirection URI -----<|                |
          |  Client  |         with Access Token      |                |
          |    in    |    (w/ Optional Refresh Token) +----------------+
          |  Browser |            in Fragment
          |          |                                +----------------+
          |          |>---(D)-- Redirection URI ----->|                |
          |          |          without Fragment      |   Web Server   |
          |          |                                |   with Client  |
          |    (F)   |<---(E)-- Web Page with -------<|    Resource    |
          |  Access  |             Script             |                |
          |   Token  |                                +----------------+
          +----------+


                                 Figure 5

   The user-agent flow illustrated in Figure 5 includes the following
   steps:

   (A)  The client sends the user-agent to the authorization server and
        includes its client identifier and redirection URI in the
        request.

   (B)  The authorization server authenticates the end user (via the
        user-agent) and establishes whether the end user grants or
        denies the client's access request.

   (C)  Assuming the end user granted access, the authorization server
        redirects the user-agent to the redirection URI provided
        earlier.  The redirection URI includes the access token in the
        URI fragment.

   (D)  The user-agent follows the redirection instructions by making a
        request to the web server which does not include the fragment.
        The user-agent retains the fragment information locally.

   (E)  The web server returns a web page containing a script capable of
        extracting the access token from the URI fragment retained by
        the user-agent.







Hammer-Lahav, et al.    Expires October 14, 2010               [Page 22]

Internet-Draft                  OAuth 2.0                     April 2010


   (F)  The user-agent executes the script provided by the web server
        which extracts the access token and passes it to the client.

3.4.3.1.  Client Requests Authorization

   In order for the end user to grant the client access, the client
   sends the end user to the authorization server.  The client
   constructs the request URI by adding the following URI query
   parameters to the user authorization endpoint URI:

   type
         REQUIRED.  The parameter value MUST be set to
         "web_client_request" (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   redirection
         An absolute URI to which the authorization server will redirect
         the user-agent to when the end user authorization step is
         completed.  The authorization server SOULD require the client
         to pre-register their redirection URI.  The redirection URI
         MUST NOT includes a query or a fragment components as defined
         by [RFC3986] section 3.  REQUIRED unless a redirection URI has
         been established between the client and authorization server
         via other means.

   state
         OPTIONAL.  An opaque value used by the client to maintain state
         between the request and callback.

   The client directs the end user to the constructed URI using an HTTP
   redirection response, or by other means available to it via the end
   user's user-agent.  The request MUST use the HTTP "GET" method.

   For example, the client directs the end user's user-agent to make the
   following HTTPS request (line breaks are for display purposes only):

     GET /authorize?type=flow_web_client&client_id=s6BhdRkqt3&
         redirection=https%3A%2F%2FEexample%2Ecom%2Frd HTTP/1.1
     Host: server.example.com


   If the client has previously registered a redirection URI with the
   authorization server, the authorization server MUST verify that the
   redirection URI received matches the registered URI associated with
   the client identifier.




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 23]

Internet-Draft                  OAuth 2.0                     April 2010


   The way in which the server authenticates the end user (e.g. username
   and password login, OpenID, session cookies) and in which the server
   obtains the end user's authorization, including whether it uses a
   secure channel such as TLS/SSL, is beyond the scope of this
   specification.  However, the server MUST first verify the identity of
   the end user.

   After receiving (or establishing via other means) an authorization
   decision from the end user, the authorization server sends the end
   user's user-agent to the provided client redirection URI using an
   HTTP redirection response.

3.4.3.1.1.  End User Grants Authorization

   If the end user authorizes the access request, the authorization
   server issues an access token and delivers it to the client by adding
   the following parameters, using the
   "application/x-www-form-urlencoded" format as defined by
   [W3C.REC-html40-19980424], to the redirection URI fragment:

   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   refresh_token
         OPTIONAL.  The refresh token.

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   For example, the server redirects the end user's user-agent by
   sending the following HTTP response:

    HTTP/1.1 302 Found
    Location: http://example.com/rd#access_token=FJQbwq9&expires_in=3600


3.4.3.1.2.  End User Denies Authorization

   If the end user denied the access request, the authorization server
   responds to the client by adding the following parameters, using the
   "application/x-www-form-urlencoded" format as defined by
   [W3C.REC-html40-19980424], to the redirection URI fragment:



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 24]

Internet-Draft                  OAuth 2.0                     April 2010


   error
         REQUIRED.  The parameter value MUST be set to "user_denied"
         (case sensitive).

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   For example, the authorization server responds with the following:

     HTTP/1.1 302 Found
     Location: http://example.com/rd#error=user_denied


   The authorization flow concludes unsuccessfully.  To extract the
   error message, the client follows the steps described in
   Section 3.4.3.2.

3.4.3.2.  Client Extracts Access Token

   The user-agent follows the authorization server redirection response
   by making an HTTP "GET" request to the URI received in the "Location"
   HTTP response header.  The user-agent SHALL NOT include the fragment
   component with the request.

   For example, the user-agent makes the following HTTP "GET" request in
   response to the redirection directive received from the authorization
   server:

     GET /rd HTTP/1.1
     Host: example.com


   The HTTP response to the redirection request returns a web page
   (typically an HTML page with an embedded script) capable of accessing
   the full redirection URI including the fragment retained by the user-
   agent, and extracting the access token (and other parameters)
   contained in the fragment.

3.4.4.  Device Flow

   The device flow is a user delegation flow suitable for clients
   executing on devices which do not have an easy data-entry method
   (e.g. game consoles or media server), but where the end user has
   separate access to a user-agent on another computer or device (e.g.
   home computer, a laptop, or a smartphone).  The client is incapable
   of receiving callback requests from the server (incapable of acting



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 25]

Internet-Draft                  OAuth 2.0                     April 2010


   as an HTTP server).

   Instead of interacting with the end user's user-agent, the client
   instructs the end user to use another computer or device and connect
   to the authorization server to approve the access request.  Since the
   client cannot receive callbacks, it polls the authorization server
   repeatedly until the end user completes the approval process.

   This device flow does not utilize the client secret since the client
   code resides on a local device which makes the client secret
   accessible and exploitable.

     +----------+                                +----------------+
     |          |>---(A)-- Client Identifier --->|                |
     |          |                                |                |
     |          |<---(B)----- Client Code, -----<|                |
     |          |              User Code,        |                |
     |          |         & Verification URI     |                |
     |  Device  |                                |                |
     |  Client  |          Client Identifier &   |                |
     |          |>---(E)------ Client Code ----->|                |
     |          |    ...                         |                |
     |          |>---(E)--->                     |                |
     |          |                                |  Authorization |
     |          |<---(F)-- Access Token --------<|     Server     |
     +----------+  (w/ Optional Refresh Token)   |                |
           v                                     |                |
           :                                     |                |
          (C) User Code & Verification URI       |                |
           :                                     |                |
           v                                     |                |
     +----------+                                |                |
     | End User |                                |                |
     |    at    |<---(D)-- User authenticates -->|                |
     |  Browser |                                |                |
     +----------+                                +----------------+


                                 Figure 6

   The device flow illustrated in Figure 6 includes the following steps:

   (A)  The client requests access from the authorization server and
        includes its client identifier in the request.







Hammer-Lahav, et al.    Expires October 14, 2010               [Page 26]

Internet-Draft                  OAuth 2.0                     April 2010


   (B)  The authorization server issues a client verification code, a
        user verification code, and provides the end user authorization
        URI.

   (C)  The client instructs the end user to use its user-agent
        (elsewhere) and visit the provided authorization URI.  The
        client provides the user with the user verification code to
        enter in order to grant access.

   (D)  The authorization server authenticates the end user (via the
        user-agent) and prompts the end user to grant the client's
        access request by entering the user verification code provided
        by the client.

   (E)  While the end user authorizes (or denies) the client's request
        (D), the client repeatedly polls the authorization server to
        find out if the end user completed the user authorization step.
        The client includes the client verification code and its client
        identifier.

   (F)  Assuming the end user granted access, the authorization server
        validates the client code provided by the client and responds
        back with the access token.

3.4.4.1.  Client Requests Authorization

   The client initiates the flow by requesting a set of verification
   codes from the authorization server by making an HTTP "GET" request
   to the authorization endpoint.  The client constructs a request URI
   by adding the following parameters to the request:

   type
         REQUIRED.  The parameter value MUST be set to
         'device_access_request' (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     GET /authorize?type=device_access_request&client_id=s6BhdRkqt3
           HTTP/1.1
     Host: server.example.com


   In response, the authorization server generates a device verification
   code and a user verification code and includes them in the HTTP



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 27]

Internet-Draft                  OAuth 2.0                     April 2010


   response body using the "application/x-www-form-urlencoded" format as
   defined by [W3C.REC-html40-19980424] with a 200 status code (OK).
   The response contains the following parameters:

   code
         REQUIRED.  The client verification code.

   user_code
         REQUIRED.  The user verification code.

   user_uri
         REQUIRED.  The user authorization URI on the authorization
         server.

   expires_in
         OPTIONAL.  The duration in seconds of the verification code
         lifetime.

   interval
         OPTIONAL.  The minimum amount of time in seconds that the
         client SHOULD wait between polling requests to the
         authorization endpoint.

   For example (line breaks are for display purposes only):

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     device_code=74tq5miHKB&user_code=94248&user_uri=http%3A%2F%2
     Fwww%2Eexample%2Ecom%2Fdevice&interval=5


   The client displays the user verification code and the user
   authorization URI to the end-user, and instructs the end user to
   visit the URI using a user-agent and enter the user verification
   code.

   The end user manually types the provided URI and authenticates with
   the authorization server.  The way in which the server authenticates
   the end user (e.g. username and password login, OpenID, session
   cookies) and in which the server obtains the end user's
   authorization, including whether it uses a secure channel such as
   TLS/SSL, is beyond the scope of this specification.  However, the
   server MUST first verify the identity of the end user.

   The authorization server prompts the end user to authorize the
   client's request by entering the user verification code provided by
   the client.  Once the end user approves or denies the request, the



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 28]

Internet-Draft                  OAuth 2.0                     April 2010


   authorization server informs the end user to return to the device for
   further instructions.

3.4.4.2.  Client Requests Access Token

   Since the client is unable to receive callbacks from the
   authorization server, it polls the server repeatedly until the end
   user grants or denies the request, or the client verification code
   expires.

   The client makes the following request at an arbitrary but reasonable
   interval which MUST NOT exceed the minimum interval rate provided by
   the server (if present via the "interval" parameter).  Alternatively,
   the client MAY provide a user interface for the end user to manually
   inform it when authorization was granted.

   The client requests an access token by making an HTTP "GET" request
   to the authorization endpoint.  The client constructs a request URI
   by adding the following parameters to the request:

   type
         The parameter value MUST be set to 'device_token_request' (case
         sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   code
         The device verification code received from the authorization
         server.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     GET /authorize?type=device_token_request&client_id=s6BhdRkqt3
          &code=J2vC42OifV HTTP/1.1
     Host: server.example.com


3.4.4.2.1.  End User Grants Authorization

   If the end user authorized the request, the authorization server
   issues and access token and delivers is to the client by including it
   in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).  The response
   contains the following parameters:




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 29]

Internet-Draft                  OAuth 2.0                     April 2010


   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   refresh_token
         OPTIONAL.  The refresh token.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8&expires_in=3600


3.4.4.2.2.  End User Denies Authorization

   If the end user denied the request, the authorization server provides
   the client with the error message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 401 status code (Unauthorized).  The
   response contains the following parameters:

   error
         REQUIRED.  Value must be set to "authorization_declined".

   For example:

     HTTP/1.1 401 Unauthorized
     Content-Type: application/x-www-form-urlencoded

     error=authorization_declined


3.4.4.2.3.  End User Authorization Pending or Expired

   If the end user authorization is pending or expired without receiving
   any response from the end user, or the client is exceeding the
   allowed polling interval, the authorization server provides the
   client with the error message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 401 status code (Unauthorized).  The
   response contains the following parameters:





Hammer-Lahav, et al.    Expires October 14, 2010               [Page 30]

Internet-Draft                  OAuth 2.0                     April 2010


   error
         REQUIRED.  Value MUST be set to "authorization_pending",
         "slow_down", or "code_expired" (case sensitive).

   For example:

     HTTP/1.1 401 Unauthorized
     Content-Type: application/x-www-form-urlencoded

     error=authorization_pending


3.5.  End User Credentials Flows

   End user credential flows are used to grant client access to
   protected resources by the end user directly sharing the end user
   credentials (typically a username and password) with the client.
   Unlike user delegation flows, end user credentials flows require a
   much higher degree of trust between the client and end user.

   These flows are suitable in cases where the end user already has a
   trust relationship with the client, such as its computer operating
   system or highly privileged applications.  Servers SHOULD take
   special care when enabling user credentials flows, and SHOULD only do
   so when other delegation flows are not viable.

   However, unlike the HTTP Basic authentication scheme defined in
   [RFC2617], the end user's credentials are used in a single request
   and are exchanged for an access token and refresh token which
   eliminates the client need to store them for future use.

3.5.1.  Username and Password Flow

   The username and password flow is an end user credentials flow
   suitable for clients capable of asking end users for their usernames
   and passwords.  It is also used to migrate existing clients using
   direct authentication schemes such as HTTP Basic or Digest
   authentication to OAuth by converting the end user credentials stored
   with tokens.

   The methods through which the client prompts end users for their
   usernames and passwords is beyond the scope of this specification.
   The client MUST discard the usernames and passwords once an access
   token has been obtained.







Hammer-Lahav, et al.    Expires October 14, 2010               [Page 31]

Internet-Draft                  OAuth 2.0                     April 2010


      End User
         v
         :
        (A)
         :
         v
     +--------+                                  +---------------+
     |        |          Client Credentials      |               |
     |        |>--(B)--- & User Credentials ---->| Authorization |
     | Client |                                  |     Server    |
     |        |<--(C)---- Access Token ---------<|               |
     |        |     (w/ Optional Refresh Token)  |               |
     +--------+                                  +---------------+


                                 Figure 7

   The username and password flow illustrated in Figure 7 includes the
   following steps:

   (A)  The end user provides the client with its username and password.

   (B)  The client sends an access token request to the authorization
        server and includes its client identifier and client secret, and
        the end user's username and password.

   (C)  The authorization server validates the end user credentials and
        the client credentials and issues an access token.

3.5.1.1.  Client Requests Access Token

   The client requests an access token by making an HTTP "POST" request
   to the authorization endpoint.  The client constructs a request URI
   by adding the following parameters to the request:

   type
         The parameter value MUST be set to 'username_password_request'
         (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   client_secret
         REQUIRED.  The client secret as described in Section 3.3.
         OPTIONAL if no client secret was issued.






Hammer-Lahav, et al.    Expires October 14, 2010               [Page 32]

Internet-Draft                  OAuth 2.0                     April 2010


   username
         REQUIRED.  The end user's username.

   password
         REQUIRED.  The end user's password.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     POST /authorize HTTP/1.1
     Host: server.example.com

     type=username_password_request&client_id=s6BhdRkqt3&client_secret=
     47HDu8s&username=johndoe&password=A3ddj3w


   The authorization server MUST validate the client credentials and end
   user credentials and if valid issue an access token and deliver to
   the client in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).

   The response contains the following parameters:

   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   refresh_token
         OPTIONAL.  The refresh token.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8&refresh_token=gO3CHNqpH8


   If the request is invalid, the authorization server returns an error
   message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).

   The response contains the following parameter:



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 33]

Internet-Draft                  OAuth 2.0                     April 2010


   error
         OPTIONAL.  The parameter value MUST be set to either
         "incorrect_credentials" or "unauthorized_client" (case
         sensitive).

   For example:

     HTTP/1.1 400 Bad Request
     Content-Type: application/x-www-form-urlencoded

     error=incorrect_credentials


3.6.  Autonomous Client Flows

   Autonomous client flows are used to grant client access to protected
   resources controlled by the client (i.e. the client is the resource
   owner).  For example, these flows are useful when a service provides
   both client-specific resources in addition to end user resources.

3.6.1.  Client Credentials Flow

   The client credentials flow is used when the client acts autonomously
   without acting on behalf of a separate resource owner.  The client
   secret is assumed to be high-entropy since it is not designed to be
   memorize by an end user.

     +--------+                                  +---------------+
     |        |                                  |               |
     |        |>--(A)--- Client Credentials ---->| Authorization |
     | Client |                                  |     Server    |
     |        |<--(B)---- Access Token ---------<|               |
     |        |                                  |               |
     +--------+                                  +---------------+


                                 Figure 8

   The client credential flow illustrated in Figure 8 includes the
   following steps:

   (A)  The client sends an access token request to the authorization
        server and includes its client identifier and client secret.

   (B)  The authorization server validates the client credentials and
        issues an access token.





Hammer-Lahav, et al.    Expires October 14, 2010               [Page 34]

Internet-Draft                  OAuth 2.0                     April 2010


3.6.1.1.  Client Requests Access Token

   The client requests an access token by making an HTTP "POST" request
   to the authorization endpoint.  The client constructs a request URI
   by adding the following parameters to the request:

   type
         The parameter value MUST be set to 'client_cred_request' (case
         sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   client_secret
         REQUIRED.  The client secret as described in Section 3.3.
         OPTIONAL if no client secret was issued.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     POST /authorize HTTP/1.1
     Host: server.example.com

     type=client_cred_request&client_id=s6BhdRkqt3&client_secret=47HDu8s


   The authorization server MUST validate the client credentials and if
   valid issue an access token and deliver to the client in the HTTP
   response body using the "application/x-www-form-urlencoded" content
   type as defined by [W3C.REC-html40-19980424] with a 200 status code
   (OK).

   The response contains the following parameters:

   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 35]

Internet-Draft                  OAuth 2.0                     April 2010


   If the request is invalid, the authorization server returns an error
   message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).

   The response contains the following parameter:

   error
         OPTIONAL.  The parameter value MUST be set to either
         "incorrect_credentials" or "unauthorized_client" (case
         sensitive).

   For example:

     HTTP/1.1 400 Bad Request
     Content-Type: application/x-www-form-urlencoded

     error=incorrect_credentials


3.6.2.  Assertion Flow

   The assertion flow requires the client to obtain a assertion such as
   a SAML [OASIS.saml-core-2.0-os] assertion from an assertion issuer
   prior to initiating the flow.  The process in which the assertion is
   obtained is defined by the assertion issuer and the authorization
   server, and is beyond the scope of this specification.

   The client credentials flow is used when the client acts autonomously
   without acting on behalf of a separate resource owner.

     +--------+                                  +---------------+
     |        |                                  |               |
     |        |>--(A)------ Assertion ---------->| Authorization |
     | Client |                                  |     Server    |
     |        |<--(B)---- Access Token ---------<|               |
     |        |                                  |               |
     +--------+                                  +---------------+


                                 Figure 9

   The client credential flow illustrated in Figure 9 includes the
   following steps:







Hammer-Lahav, et al.    Expires October 14, 2010               [Page 36]

Internet-Draft                  OAuth 2.0                     April 2010


   (A)  The client sends an access token request to the authorization
        server and includes an assertion.

   (B)  The authorization server validates the assertion and issues an
        access token.

3.6.2.1.  Client Requests Access Token

   The client requests an access token by making an HTTP "POST" request
   to the authorization endpoint.  The client constructs a request URI
   by adding the following parameters to the request:

   type
         The parameter value MUST be set to 'assertion_request' (case
         sensitive).

   format
         The format of the assertion as defined by the authorization
         server.

   assertion
         The assertion.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     POST /authorize HTTP/1.1
     Host: server.example.com

     format=_______&assertion=_______


   The authorization server MUST validate the assertion and if valid
   issue an access token and deliver to the client in the HTTP response
   body using the "application/x-www-form-urlencoded" content type as
   defined by [W3C.REC-html40-19980424] with a 200 status code (OK).

   The response contains the following parameters:

   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.






Hammer-Lahav, et al.    Expires October 14, 2010               [Page 37]

Internet-Draft                  OAuth 2.0                     April 2010


   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8


   If the assertion is invalid, the authorization server returns an
   error message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).

   The response contains the following parameter:

   error
         OPTIONAL.  The parameter value MUST be set to either
         "incorrect_credentials" or "unauthorized_client" (case
         sensitive).

   For example:

     HTTP/1.1 400 Bad Request
     Content-Type: application/x-www-form-urlencoded

     error=incorrect_credentials


   Authorization servers SHOULD issue access tokens with a limited
   lifetime and require clients to refresh them by requesting a new
   access token using the same assertion if it is still valid.
   Otherwise the client MUST obtain a new valid assertion.


4.  Refreshing an Access Token

   Token refresh is used when the lifetime of an access token is shorter
   than the lifetime of the authorization grant.  It allows clients to
   obtain a new access token without having to go through the
   authorization flow again or involve the resource owner.  It is also
   used to obtain a new token with different security properties (e.g.
   bearer token, token with shared symmetric secret).









Hammer-Lahav, et al.    Expires October 14, 2010               [Page 38]

Internet-Draft                  OAuth 2.0                     April 2010


     +--------+          Client Credentials,     +---------------+
     |        |            Refresh Token,        |               |
     |        |>--(A)----- & Secret Type ------->| Authorization |
     | Client |                                  |     Server    |
     |        |<--(B)----- Access Token --------<|               |
     |        |          & Optional Secret       |               |
     +--------+                                  +---------------+


                                 Figure 10

   To refresh a token, the client constructs an HTTP "POST" request to
   the authorization endpoint and includes the following parameters in
   the HTTP request body using the "application/x-www-form-urlencoded"
   content type as defined by [W3C.REC-html40-19980424]:

   type
         REQUIRED.  The parameter value MUST be set to 'refresh_token'
         (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   client_secret
         REQUIRED if the client was issued a secret.  The client secret.

   refresh_token
         REQUIRED.  The refresh token associated with the access token
         to be refreshed.

   secret_type
         OPTIONAL.  This specification defines two values: "none" for an
         access token without a secret (bearer token) and "hmac" for a
         token with a shared symmetric secret suitable for signing
         requests using an HMAC cryptographic algorithm (as defined in
         [RFC2104]).  The value defaults to "none" if omitted.  Using
         token secrets is described in Section 5.2.1.

   For example, the client makes the following HTTPS request (line break
   are for display purposes only):


     POST /authorize HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     type=refresh_token&client_id=s6BhdRkqt3&client_secret=8eSEIpnqmM
     &refresh_token=n4E9O119d&secret_type=hmac



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 39]

Internet-Draft                  OAuth 2.0                     April 2010


   The authorization server MUST verify the client credential, the
   validity of the refresh token, and that the resource owner's
   authorization is still valid.  If the request is valid, the
   authorization server issues a new access token and includes the
   following parameters in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK):

   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   access_token_secret
         REQUIRED if requested by the client.  The corresponding access
         token secret as requested by the client.

   For example:


    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    access_token=8F44J2HGMl&access_token_secret=hfd83hjd&expires_in=3600


   The authorization server MUST invalidate the old access token being
   replaced.

   If the request fails verification, the authorization server returns
   an error message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).

   The response contains the following parameter:

   error
         OPTIONAL.  The parameter value MUST be set to either
         "incorrect_credentials", "authorization_expired", or
         "unsupported_secret_type" (case sensitive).









Hammer-Lahav, et al.    Expires October 14, 2010               [Page 40]

Internet-Draft                  OAuth 2.0                     April 2010


   For example:

     HTTP/1.1 400 Bad Request
     Content-Type: application/x-www-form-urlencoded

     error=incorrect_credentials



5.  Accessing a Protected Resource

   Clients access protected resources by presenting an access token to
   the resource server.  The methods used by the resource server to
   validate the access token are beyond the scope of this specification,
   but generally involve an interaction or coordination between the
   resource server and authorization server.

   The method in which a client uses an access token depends on the
   security properties of the access tokens.  By default, access tokens
   are issued without a matching secret.  The token refresh method
   (Section 4) enables clients to request an access token with different
   security properties by replacing it with a new access token with a
   matching secret.

   When an access token does not include a matching secret, the access
   token acts as a bearer token, where the token string is a shared
   symmetric secret.  This requires treating the access token with the
   same care as other secrets (e.g. user passwords).  Access tokens
   SHOULD NOT be sent in the clear over an insecure channel.

   However, when it is necessary to transmit bearer tokens in the clear
   without a secure channel, authorization servers must issue access
   tokens with limited scope and lifetime to reduce the potential risk
   from a compromised access token.  Clients SHOULD request and utilize
   an access token with a matching secret when making protected resource
   requests over an insecure channel (e.g. an HTTP request without using
   SSL/TLS).

   When an access token includes a matching secret, the secret is not
   included directly in the request but

   Clients SHOULD NOT make authenticated requests with an access token
   to unfamiliar servers, especially when using bearer tokens,
   regardless of the presence of a secure channel.







Hammer-Lahav, et al.    Expires October 14, 2010               [Page 41]

Internet-Draft                  OAuth 2.0                     April 2010


5.1.  Bearer Token Requests

   Clients make bearer token requests by including the access token
   using the HTTP "Authorization" request header with the "Token"
   authentication scheme as described in Section 5.2.  The access token
   is included using the "token" parameter.

   For example, the client makes the following HTTPS request:

     GET /resource HTTP/1.1
     Host: server.example.com
     Authorization: Token token="vF9dft4qmT"


   The resource server MUST validate the access token and ensure it has
   not expired and that its scope covers the requested resource.  If the
   token expired or is invalid, the resource server MUST reply with an
   HTTP 401 status code (Unauthorized) and include the HTTP
   "WWW-Authenticate" response header as described in Section 6.1.

   For example:

     HTTP/1.1 401 Unauthorized
     WWW-Authenticate: Token realm='Service', error='token_expired'


   Alternatively, the client MAY include the access token using the HTTP
   request URI in the query component as described in Section 5.1.1, or
   in the HTTP body when using the "application/x-www-form-urlencoded"
   content type as described in Section 5.1.2.  Clients SHOULD only use
   the request URI or body when the "Authorization" request header is
   not available, and MUST NOT use more than one method in each request.

5.1.1.  URI Query Parameter

   When including the access token in the HTTP request URI, the client
   adds the access token to the request URI query component as defined
   by [RFC3986] using the "oauth_token" parameter.

   For example, the client makes the following HTTPS request:


     GET /resource?oauth_token=vF9dft4qmT HTTP/1.1
     Host: server.example.com


   The HTTP request URI query can include other request-specific
   parameters, in which case, the "oauth_token" parameters SHOULD be



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 42]

Internet-Draft                  OAuth 2.0                     April 2010


   appended following the request-specific parameters, properly
   separated by an "&" character (ASCII code 38).

   The resource server MUST validate the access token and ensure it has
   not expired and its includes the requested resource.  If the resource
   expired or is not valid, the resource server MUST reply with an HTTP
   401 status code (Unauthorized) and include the HTTP
   "WWW-Authenticate" response header as described in Section 6.1.

5.1.2.  Form-Encoded Body Parameter

   When including the access token in the HTTP request entity-body, the
   client adds the access token to the request body using the
   "oauth_token" parameter.  The client can use this method only if the
   following REQUIRED conditions are met:

   o  The entity-body is single-part.

   o  The entity-body follows the encoding requirements of the
      "application/x-www-form-urlencoded" content-type as defined by
      [W3C.REC-html40-19980424].

   o  The HTTP request entity-header includes the "Content-Type" header
      field set to "application/x-www-form-urlencoded".

   o  The HTTP request method is "POST", "PUT", or "DELETE".

   The entity-body can include other request-specific parameters, in
   which case, the "oauth_token" parameters SHOULD be appended following
   the request-specific parameters, properly separated by an "&"
   character (ASCII code 38).

   For example, the client makes the following HTTPS request:


     POST /resource HTTP/1.1
     Host: server.example.com
     Content-Type: application/x-www-form-urlencoded

     oauth_token=vF9dft4qmT


   The resource server MUST validate the access token and ensure it has
   not expired and its includes the requested resource.  If the resource
   expired or is not valid, the resource server MUST reply with an HTTP
   401 status code (Unauthorized) and include the HTTP
   "WWW-Authenticate" response header as described in Section 6.1.




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 43]

Internet-Draft                  OAuth 2.0                     April 2010


5.2.  The Authorization Request Header

   The "Authorization" request header field is used by clients to make
   both bearer token and cryptographic token requests.  When making
   bearer token requests, the client uses the "token" attribute to
   include the access token in the request without any of the other
   attributes.

   For example:

     GET /resource HTTP/1.1
     Host: server.example.com
     Authorization: Token token="vF9dft4qmT"


   When making a cryptographic token request (using an access token with
   a matching secret) the client uses the "token" attribute to include
   the access token in the request, and uses the "nonce", "timestamp",
   "algorithm", and "signature" attributes to apply the matching secret.

   For example:

     GET /resource HTTP/1.1
     Host: server.example.com
     Authorization: Token token="vF9dft4qmT",
                          nonce="s8djwd",
                          timestamp="137131200",
                          algorithm="hmac:sha-256",
                          signature="wOJIO9A2W5mFwDgiDvZbTSMK/PY="


   The "Authorization" header field uses the framework defined by
   [RFC2617] as follows:


















Hammer-Lahav, et al.    Expires October 14, 2010               [Page 44]

Internet-Draft                  OAuth 2.0                     April 2010


     credentials    = "Token" RWS token-response

     token-response = token-id
                      [ CS nonce ]
                      [ CS timestamp ]
                      [ CS algorithm ]
                      [ CS signature ]

     token-id         = "token" "=" <"> token <">
     timestamp        = "timestamp" "=" <"> 1*DIGIT <">
     nonce            = "nonce" "=" <"> token <">

     algorithm        = "algorithm" "=" algorithm-name
     algorithm-name   = secret-type ":" function-type
     secret-type      = "hmac" /
                        token
     function-type    = "sha-256" /
                        token

    signature        = "signature" "=" <"> token <">


5.2.1.  Cryptographic Tokens

5.2.1.1.  The 'nonce' and 'timestamp' Attributes

   Cryptographic token authentication uses timestamps in combination
   with unique nonce values to protect against replay attacks when
   transmitted over an insecure channel.

   The nonce is a random string, uniquely generated by the client to
   allow the server to verify that a request has never been made before
   and helps prevent replay attacks when requests are made over a non-
   secure channel.  The nonce value MUST be unique across all requests
   with the same timestamp and token combinations.

   The timestamp value is the current time expressed in the number of
   seconds since January 1, 1970 00:00:00 GMT, and MUST be a positive
   integer.

   To avoid the need to retain an infinite number of nonce values for
   future checks, servers MAY choose to restrict the time period after
   which a request with an old timestamp is rejected.  When servers
   apply such a restriction, clients SHOULD synchronize their clocks by
   using the server's time as indicated by the HTTP "Date" response
   header field as defined in [RFC2616].





Hammer-Lahav, et al.    Expires October 14, 2010               [Page 45]

Internet-Draft                  OAuth 2.0                     April 2010


5.2.1.2.  The 'algorithm' and 'signature' Attributes

   The output of the authentication method function after applying it to
   the selected coverage.

5.2.1.2.1.  The 'hmac-sha-256' Method

   The "hmac-sha-256" authentication method uses the HMAC algorithm as
   defined in [RFC2104] together with the SHA-256 hash function defined
   in [NIST FIPS-180-3]:

     digest = HMAC-SHA256 (key, text)


   The HMAC-SHA256 function variables are used in following way:

   text
         is set to the value of the normalize request string as
         described in Section 5.2.1.2.2.

   key
         is set to the shared-secret associated with the token.

   digest
         is used to set the value of the "auth" attribute, after the
         result octet string is base64-encoded per [RFC2045] section
         6.8.

5.2.1.2.2.  Normalized String Construction

   The normalized request string is a consistent, reproducible
   concatenation of several of the HTTP request elements into a single
   string.  The string is used as an input to the selected cryptographic
   method and includes the HTTP request method (e.g.  "GET", "POST",
   etc.), the authority as declared by the HTTP "Host" request header,
   and the request resource URI.

   The normalized request string does not cover the entire HTTP request.
   Most notably, it does not include the entity-body or most HTTP
   entity-headers.  It is important to note that the server cannot
   verify the authenticity of the excluded request elements without
   using additional protections such as SSL/TLS.

   The normalized request string is constructed by concatenating
   together, in order, the following HTTP request elements:

   1.   The request timestamp as described in Section 5.2.1.1.




Hammer-Lahav, et al.    Expires October 14, 2010               [Page 46]

Internet-Draft                  OAuth 2.0                     April 2010


   2.   A "," character (ASCII code 44).

   3.   The request nonce as described in Section 5.2.1.1.

   4.   A "," character (ASCII code 44).

   5.   The cryptographic algorithm used.

   6.   A "," character (ASCII code 44).

   7.   The HTTP request method in uppercase.  For example: "HEAD",
        "GET", "POST", etc.

   8.   A "," character (ASCII code 44).

   9.   The hostname, colon-separated (ASCII code 58) from the TCP port
        used to make the request as included in the HTTP request "Host"
        header field.  The port MUST be included even if it is not
        included in the "Host" header field (i.e. the default port for
        the scheme).

   10.  A "," character (ASCII code 44).

   11.

   12.  A "," character (ASCII code 44).

   13.  The request resource URI.


6.  Identifying a Protected Resource

   Clients access protected resources after locating the appropriate
   authorization endpoint and obtaining an access token.  In many cases,
   interacting with a protected resource requires prior knowledge of the
   protected resource properties and methods, as well as its
   authentication requirements (i.e. establishing client identity,
   locating the authorization endpoint).

   However, there are cases in which clients are unfamiliar with the
   protected resource, including whether the resource requires
   authentication.  When clients attempt to access an unfamiliar
   protected resource without an access token, the resource server
   denies the request and informs the client of the required credentials
   using an HTTP authentication challenge.

   In addition, when receiving an invalid authenticated request, the
   resource server issues an authentication challenge including the



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 47]

Internet-Draft                  OAuth 2.0                     April 2010


   error type and message.

6.1.  The WWW-Authenticate Response Header

   A resource server receiving a request for a protected resource
   without a valid access token MUST respond with a 401 HTTP status code
   (Unauthorized), and includes at least one "Token" "WWW-Authenticate"
   response header field challenge.

   The "WWW-Authenticate" header field uses the framework defined by
   [RFC2617] as follows:

     challenge       = "Token" RWS token-challenge

     token-challenge = realm
                       [ CS authz-uri ]
                       [ CS algorithms ]
                       [ CS error ]

     authz-uri       = "authorization-uri" "=" URI-Reference
     algorithms      = "algorithms" "=" <"> 1#algorithm-name  <">
     error           = "error" "=" <"> token <">

     CS              = OWS "," OWS


6.1.1.  The 'realm' Attribute

   The "realm" attribute is used to provide the protected resources
   partition as defined by [RFC2617].

6.1.2.  The 'authorization-uri' Attribute

6.1.3.  The 'algorithms' Attribute

6.1.4.  The 'error' Attribute


7.  Security Considerations

   [[ Todo ]]


8.  IANA Considerations

   [[ Not Yet ]]





Hammer-Lahav, et al.    Expires October 14, 2010               [Page 48]

Internet-Draft                  OAuth 2.0                     April 2010


9.  Acknowledgements

   [[ Add OAuth 1.0a authors + WG contributors ]]


Appendix A.  Differences from OAuth 1.0a

   [[ Todo ]]


Appendix B.  Document History

   [[ to be removed by RFC editor before publication as an RFC ]]

   -00

   o  Initial draft based on a combination of WRAP and OAuth 1.0a.


10.  References

10.1.  Normative References

   [I-D.ietf-httpbis-p1-messaging]
              Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,
              Masinter, L., Leach, P., Berners-Lee, T., and J. Reschke,
              "HTTP/1.1, part 1: URIs, Connections, and Message
              Parsing", draft-ietf-httpbis-p1-messaging-09 (work in
              progress), March 2010.

   [NIST FIPS-180-3]
              National Institute of Standards and Technology, "Secure
              Hash Standard (SHS). FIPS PUB 180-3, October 2008".

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, November 1996.

   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
              Hashing for Message Authentication", RFC 2104,
              February 1997.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.



Hammer-Lahav, et al.    Expires October 14, 2010               [Page 49]

Internet-Draft                  OAuth 2.0                     April 2010


   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.

   [RFC3447]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", RFC 3447, February 2003.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, November 2003.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.

   [W3C.REC-html40-19980424]
              Jacobs, I., Hors, A., and D. Raggett, "HTML 4.0
              Specification", World Wide Web Consortium
              Recommendation REC-html40-19980424, April 1998,
              <http://www.w3.org/TR/1998/REC-html40-19980424>.

10.2.  Informative References

   [I-D.hammer-oauth]
              Hammer-Lahav, E., "The OAuth 1.0 Protocol",
              draft-hammer-oauth-10 (work in progress), February 2010.

   [I-D.hardt-oauth]
              Hardt, D., Tom, A., Eaton, B., and Y. Goland, "OAuth Web
              Resource Authorization Profiles", draft-hardt-oauth-01
              (work in progress), January 2010.

   [OASIS.saml-core-2.0-os]
              Cantor, S., Kemp, J., Philpott, R., and E. Maler,
              "Assertions and Protocol for the OASIS Security Assertion
              Markup Language (SAML) V2.0", OASIS Standard saml-core-
              2.0-os, March 2005.











Hammer-Lahav, et al.    Expires October 14, 2010               [Page 50]

Internet-Draft                  OAuth 2.0                     April 2010


Authors' Addresses

   Eran Hammer-Lahav (editor)
   Yahoo!

   Email: eran@hueniverse.com


   David Recordon
   Facebook

   Email: davidrecordon@facebook.com
   URI:   http://www.davidrecordon.com/


   Dick Hardt

   Email: dick.hardt@gmail.com
   URI:   http://dickhardt.org/
































Hammer-Lahav, et al.    Expires October 14, 2010               [Page 51]


