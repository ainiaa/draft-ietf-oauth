


Network Working Group                               E. Hammer-Lahav, Ed.
Internet-Draft
Intended status: Standards Track                             D. Recordon
Expires: October 9, 2010                                        Facebook
                                                                D. Hardt
                                                           April 7, 2010


                         The OAuth 2.0 Protocol
                          draft-ietf-oauth-00

Abstract

   This specification describes the OAuth 2.0 protocol.  OAuth provides
   a method for making authenticated HTTP requests using a token - an
   identifier used to denote an access grant with specific scope,
   duration, and other attributes.  Tokens are issued to third-party
   clients by an authorization server with the approval of the resource
   owner.  OAuth defines multiple flows for obtaining a token to support
   a wide range of client types and user experience.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 9, 2010.

Copyright Notice

   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Hammer-Lahav, et al.     Expires October 9, 2010                [Page 1]

Internet-Draft                  OAuth 2.0                     April 2010


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Authors  . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  5
     2.2.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3.  Example  . . . . . . . . . . . . . . . . . . . . . . . . .  8
     2.4.  Notational Conventions . . . . . . . . . . . . . . . . . .  8
   3.  Obtaining an Access Token  . . . . . . . . . . . . . . . . . .  8
     3.1.  Authorization Endpoint . . . . . . . . . . . . . . . . . .  9
     3.2.  Flow Parameters  . . . . . . . . . . . . . . . . . . . . .  9
     3.3.  Client Credentials . . . . . . . . . . . . . . . . . . . .  9
     3.4.  User Delegation Flows  . . . . . . . . . . . . . . . . . . 10
       3.4.1.  Web Callback Flow  . . . . . . . . . . . . . . . . . . 10
       3.4.2.  User-Agent Flow  . . . . . . . . . . . . . . . . . . . 15
       3.4.3.  Device Flow  . . . . . . . . . . . . . . . . . . . . . 20
     3.5.  End User Credentials Flows . . . . . . . . . . . . . . . . 23
       3.5.1.  Username and Password Flow . . . . . . . . . . . . . . 23
     3.6.  Autonomous Client Flows  . . . . . . . . . . . . . . . . . 26
       3.6.1.  Client Credentials Flow  . . . . . . . . . . . . . . . 26
       3.6.2.  Assertion Flow . . . . . . . . . . . . . . . . . . . . 28
   4.  Refreshing an Access Token . . . . . . . . . . . . . . . . . . 29
   5.  Accessing a Protected Resource . . . . . . . . . . . . . . . . 31
     5.1.  Bearer Token Requests  . . . . . . . . . . . . . . . . . . 31
       5.1.1.  HTTP Header  . . . . . . . . . . . . . . . . . . . . . 32
       5.1.2.  URI Query Parameter  . . . . . . . . . . . . . . . . . 33
       5.1.3.  Form-Encoded Body Parameter  . . . . . . . . . . . . . 33
     5.2.  Signed Requests  . . . . . . . . . . . . . . . . . . . . . 34
       5.2.1.  Computing the signature  . . . . . . . . . . . . . . . 36
       5.2.2.  Client Calls Protected Resource Using HTTP Headers . . 36
   6.  The WWW-Authenticate Response Header . . . . . . . . . . . . . 37
     6.1.  The 'realm' Attribute  . . . . . . . . . . . . . . . . . . 38
     6.2.  The 'authorization-uri' Attribute  . . . . . . . . . . . . 38
     6.3.  The 'timestamp' Attribute  . . . . . . . . . . . . . . . . 38
   7.  The Authorization Request Header . . . . . . . . . . . . . . . 38
     7.1.  The 'token' Attribute  . . . . . . . . . . . . . . . . . . 39
     7.2.  The 'nonce' Attribute  . . . . . . . . . . . . . . . . . . 39
     7.3.  The 'timestamp' Attribute  . . . . . . . . . . . . . . . . 39
     7.4.  The 'signature' Attribute  . . . . . . . . . . . . . . . . 39
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 39
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 39
   10. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 39



Hammer-Lahav, et al.     Expires October 9, 2010                [Page 2]

Internet-Draft                  OAuth 2.0                     April 2010


   Appendix A.  Differences from OAuth 1.0a . . . . . . . . . . . . . 39
   Appendix B.  Document History  . . . . . . . . . . . . . . . . . . 39
   11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 40
     11.1. Normative References . . . . . . . . . . . . . . . . . . . 40
     11.2. Informative References . . . . . . . . . . . . . . . . . . 41
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 41













































Hammer-Lahav, et al.     Expires October 9, 2010                [Page 3]

Internet-Draft                  OAuth 2.0                     April 2010


1.  Authors

   This specification was authored with the participation and based on
   the work of Allen Tom (Yahoo!), Brian Eaton (Google), Brent Goldman
   (Facebook), Luke Shepard (Facebook), Raffi Krikorian (Twitter), and
   Yaron Goland (Microsoft).


2.  Introduction

   With the increasing use of distributed web services and cloud
   computing, third-party applications require access to server-hosted
   resources.  These resources are usually private and require
   authentication using the resource owner's credentials (typically a
   username and password).  In the traditional client-server
   authentication model, a client accessing a protected resource on a
   server presents the resource owner's credentials in order to
   authenticate and gain access.

   Resource owners should not be required to share their credentials
   when granting third-party applications access to their protected
   resources.  They should also have the ability to restrict access to a
   limited subset of the resources they control, to limit access
   duration, or to limit access to the methods supported by these
   resources.

   OAuth provides a method for making authenticated HTTP requests using
   a token - an identifier used to denote an access grant with specific
   scope, duration, and other attributes.  Tokens are issued to third-
   party clients by an authorization server with the approval of the
   resource owner.  Instead of sharing their credentials with the
   client, resource owners grant access by authenticating directly with
   the authorization server which in turn issues a token to the client.
   The client uses the token (and optional secret) to authenticate with
   the resource server and gain access.

   For example, a web user (resource owner) can grant a printing service
   (client) access to her private photos stored at a photo sharing
   service (resource server), without sharing her username and password
   with the printing service.  Instead, she authenticates directly with
   the photo sharing service (authorization server) which issues the
   printing service delegation-specific credentials (token).

   The use of OAuth with any other transport protocol than HTTP
   [RFC2616] is undefined.






Hammer-Lahav, et al.     Expires October 9, 2010                [Page 4]

Internet-Draft                  OAuth 2.0                     April 2010


2.1.  Terminology

   resource server
         An HTTP [RFC2616] server capable of accepting authenticated
         resource requests using the OAuth protocol.

   protected resource
         An access-restricted resource which can be obtained from a
         resource server using an OAuth-authenticated request.

   client
         An HTTP client capable of making authenticated requests for
         protected resources using the OAuth protocol.

   resource owner
         An entity capable of granting access to a protected resource.

   end user
         A human resource owner.

   access token
         A unique identifier used by the client to make authenticated
         requests on behalf of the resource owner.  Access tokens may
         have a matching secret.

   authorization server
         An HTTP server capable of issuing tokens after successfully
         authenticating the resource owner and obtaining authorization.
         The authorization server may be the same server as the resource
         server, or a separate entity.

   authorization endpoint
         The authorization server's HTTP endpoint authenticating the
         resource owner, obtaining authorization, issuing tokens, and
         refreshing expired tokens.

   client identifier
         An unique identifier issued by the client to identify itself to
         the authorization server.  Client identifiers may have a
         matching secret.

   refresh token
         A unique identifier used by the client to replace an expired
         access token with a new access token without having to involve
         the resource owner.  A refresh token is used when the access
         token is valid for a shorter time period than the duration of
         the access grant approved by the resource owner.




Hammer-Lahav, et al.     Expires October 9, 2010                [Page 5]

Internet-Draft                  OAuth 2.0                     April 2010


2.2.  Overview

   Clients interact with a protected resource, first by requesting
   access (which is granted in the form of an access token) from the
   authorization server, and then by authenticating with the resource
   server by presenting the access token.  Figure 1 demonstrates the
   flow between the client and authorization server (A, B), and the flow
   between the client and resource server (C, D), when the client is
   acting autonomously (the client is also the resource owner).

     +---+                                  +---------------+
     |   |--(A)------ Credentials --------->| Authorization |
     | C |                                  |    Server     |
     | l |<-(B)------ Access Token ---------|               |
     | i |      (w/ Optional Refresh Token) +---------------+
     | e |
     | n |            HTTP Request          +---------------+
     | t |--(C)--- with Access Token ------>|    Resource   |
     |   |                                  |     Server    |
     |   |<-(D)------ HTTP Response --------|               |
     +---+                                  +---------------+


                                 Figure 1

   Access token strings can use any internal structure agreed upon
   between the authorization server and the resource server, but their
   structure is opaque to the client.  Since the access token provides
   the client access to the protected resource for the life of the
   access token, the authorization server should issue access tokens
   which expire within an appropriate time, usually much shorter than
   the duration of the access grant.

   When an access token expires, the client can request a new access
   token from the authorization server by presenting its credentials
   again (Figure 1), or by using the refresh token (if issued with the
   access token) as shown in Figure 2.  Once an expired access token has
   been replaced with a new access token (A, B), the client uses the new
   access token as before (C, D).












Hammer-Lahav, et al.     Expires October 9, 2010                [Page 6]

Internet-Draft                  OAuth 2.0                     April 2010


     +---+                                  +---------------+
     |   |--(A)------ Refresh Token ------->| Authorization |
     | C |                                  |    Server     |
     | l |<-(B)------ Access Token ---------|               |
     | i |                                  +---------------+
     | e |
     | n |            HTTP Request          +---------------+
     | t |--(C)--- with Access Token ------>|    Resource   |
     |   |                                  |     Server    |
     |   |<-(D)----- HTTP Response ---------|               |
     +---+                                  +---------------+


                                 Figure 2

   This specification defines a number of authorization flows to support
   different client types and scenarios.  These authorization flows can
   be separated into three groups: user delegation flows where the
   client is acting on behalf of an end user, end user credentials flows
   where the client uses the end user's credentials directly to obtain
   authorization, and autonomous flows where the client is acting for
   itself (the client is also the resource owner).

   Additional authorization flows may be defined by other specifications
   to cover different scenarios and client types.

   The user delegation authorization flows defined by this
   specifications are:

   o  Web Callback Flow - This flow is optimized for cases where the
      client is part of a web server application.  When an HTTP server
      is integrated with the client, the client can utilize HTTP server
      resources (such as send user-agent redirect requests and receive
      incoming callback requests) to enhance its interaction with the
      end user.  This flow is described in Section 3.4.1.

   o  User-Agent Flow - This flow is designed for clients running inside
      a user-agent (typically a web browser), and therefore cannot
      receive callbacks from the authorization server.  This flow is
      described in Section 3.4.2.

   o  Device Flow - This flow is described in Section 3.4.3.

   The end user credentials flow defined by this specification is:

   o  Username and Password Flow - This flow is used in cases where the
      end user trusts the client to handle its credentials but it is
      still undesirable for the client to store the end user's username



Hammer-Lahav, et al.     Expires October 9, 2010                [Page 7]

Internet-Draft                  OAuth 2.0                     April 2010


      and password.  The client uses its client identifier and the end
      user's username and password to obtain an access token.  Since the
      flow requires exposing end user credentials to the client, it
      should only be used where other delegation flows cannot be used
      and the client can be trusted.  This flow is described in
      Section 3.5.1.

   The autonomous authorization flows defined by this specifications
   are:

   o  Client Credentials Flow - The client is provisioned with an
      account name and corresponding secret by the authorization server.
      The client presents the account name and secret to the
      authorization Server in exchange for an access token.  The client
      secret is assumed to be high-entropy since it is not designed to
      be memorize by an end user.  This flow is described in
      Section 3.6.1.

   o  Assertion Flow - The client presents an assertion such as a SAML
      [OASIS.saml-core-2.0-os] assertion to the authorization server in
      exchange for an access token.  The methods through which the
      client obtains the assertions are beyond the scope of this
      specification.  This flow is described in Section 3.6.2.

2.3.  Example

   [[ Todo ]]

2.4.  Notational Conventions

   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   document are to be interpreted as described in [RFC2119].

   This document uses the Augmented Backus-Naur Form (ABNF) notation of
   [I-D.ietf-httpbis-p1-messaging].  Additionally, the realm and auth-
   param rules are included from [RFC2617], and the URI-Reference rule
   from [RFC3986].


3.  Obtaining an Access Token

   The client obtains an access token by using one of the authorization
   flows supported by the authorization server.  The authorization flows
   all use the same authorization endpoint, each with a different set of
   request parameters and values.





Hammer-Lahav, et al.     Expires October 9, 2010                [Page 8]

Internet-Draft                  OAuth 2.0                     April 2010


3.1.  Authorization Endpoint

   The client obtains the URI of the authorization endpoint from the
   server's documentation, or by making an unauthorized protected
   resource request (from the "WWW-Authenticate" response header
   authorization-uri (Section 6.2) attribute).

   The authorization endpoint advertised by the server MUST NOT include
   a query or fragment components as defined by [RFC3986] section 3.

   Since requests to the authorization endpoint result in the
   transmission of plain text credentials in the HTTP request and
   response, the authorization server MUST require the use of a
   transport-layer mechanism such as TLS or SSL (or a secure channel
   with equivalent protections) when sending requests to the
   authorization endpoints.

3.2.  Flow Parameters

   Clients should avoid making assumptions about the size of tokens and
   other server-generated values, which are left undefined by this
   specification.  Servers should document the expected size of any
   value they issue.

   [[ Open Issue ]] It is RECOMMENDED that authorization servers make
   their identifiers, secrets, and tokens string shorter than 255
   characters in length in order to ease client implementations.

   [[ Open Issue ]] The values of the request and response parameters
   defined in this section MUST only contain the following characters:

     value-char  = ALPHA / DIGIT / "-" / "." / "_" / "~" / "%"


   Servers which require the use of other characters MUST specify how
   such values are to be encoded to comply with the character-set
   restriction.

3.3.  Client Credentials

   When requesting access from the authorization server, the client
   identifies itself using its authorization-server-issued client
   credentials.  The client credentials include a client identifier and
   an OPTIONAL symmetric shared secret.  The means through which the
   client obtains these credentials are beyond the scope of this
   specification, but usually involve registration with the
   authorization server.




Hammer-Lahav, et al.     Expires October 9, 2010                [Page 9]

Internet-Draft                  OAuth 2.0                     April 2010


   The client identifier is used by the authorization server to
   establish the identity of the client for the purpose of presenting
   information to the resource owner prior to granting access, as well
   as for providing different service levels to different clients.  They
   can also be used to block unauthorized clients from requesting
   access.

   Due to the nature of some clients, authorization servers SHOULD NOT
   make assumptions about the confidentiality of client credentials
   without establishing trust with the client operator.

3.4.  User Delegation Flows

   User delegation flows are used to grant client access to protected
   resources by the end user without sharing the end user credentials
   (typically a username and password) with the client.  Instead, the
   end user authenticates directly with the authorization server, and
   grants client access to its protected resources.

3.4.1.  Web Callback Flow

   The web callback flow is a user delegation flow suitable for clients
   capable of interacting with the end user's user-agent (typically a
   web browser) and capable of receiving callback requests from the
   server (capable of acting as an HTTP server).

     +----------+         Client Identifier       +---------------+
     |         -+----(A)-- & Callback URI ------->|               |
     | End User |                                 | Authorization |
     |    at    |<---(B)-- User authenticates --->|     Server    |
     | Browser  |                                 |               |
     |         -+----(C)-- Verification Code ----<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (A)  (C)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(D)-- Client Credentials, --------'      |
     |   Web   |           Verification Code,                |
     |  Client |            & Callback URI                   |
     |         |                                             |
     |         |<---(E)-- Access Token ----------------------'
     +---------+


                                 Figure 3




Hammer-Lahav, et al.     Expires October 9, 2010               [Page 10]

Internet-Draft                  OAuth 2.0                     April 2010


   The web callback flow illustrated in Figure 3 includes the following
   steps:

   (A)  The web client initiates the flow by redirecting the end user's
        user-agent to the authorization endpoint with its client
        identifier and a callback URI to which the server will send the
        end user back once authorization is received (or denied).

   (B)  The authorization server authenticates the end user (via the
        user-agent) and prompts the end user to grant of deny the
        client's access request.

   (C)  Assuming the end user granted access, the authorization server
        redirects the user-agent back to the client to the callback URI
        provided earlier.  The authorization includes a verification
        code for the client to use to obtain an access token.

   (D)  The client requests an access token from the authorization
        server by including its client credentials (identifier and
        secret), as well as the verification code received in the
        previous step.

   (E)  The authorization server validates the client credentials and
        the verification token and responds back with the access token.

3.4.1.1.  Client Requests Access

   In order for the end user to grant the client access, the client
   sends the end user to the authorization server.  The client
   constructs the request URI by adding the following URI query
   parameters to the user authorization endpoint URI:

   type
         REQUIRED.  The parameter value MUST be set to
         "web_callback_access_request" (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   callback
         An absolute URI to which the authorization server will redirect
         the end user back when the end user authorization step is
         completed.  The authorization server MAY require the client to
         pre-register their callback URI.  The callback URI MUST NOT
         includes a query or a fragment components as defined by
         [RFC3986] section 3.  REQUIRED unless a callback URI has been
         established between the client and authorization server via
         other means.



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 11]

Internet-Draft                  OAuth 2.0                     April 2010


   state
         An OPTIONAL opaque value used by the client to maintain state
         between the request and callback.

   The client directs the end user to the constructed URI using an HTTP
   redirection response, or by other means available to it via the end
   user's user-agent.  The request MUST use the HTTP "GET" method.

   For example, the client directs the end user's user-agent to make the
   following HTTPS requests (line breaks are for display purposes only):

     GET /authorization?type=web_callback_access_request&client_id=
         s6BhdRkqt3&callback=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
          HTTP/1.1
     Host: server.example.com


   If the client has previously registered a callback URI with the
   authorization server, the authorization server MUST verify that the
   callback URI received matches the registered URI associated with the
   client identifier.

   The way in which the server authenticates the end user (e.g. username
   and password login, OpenID, session cookies) and in which the server
   obtains the end user's authorization, including whether it uses a
   secure channel such as TLS/SSL, is beyond the scope of this
   specification.  However, the server MUST first verify the identity of
   the end user.

   After receiving (or establishing via other means) an authorization
   decision from the resource owner, the authorization server sends the
   end user's user-agent to the provided client callback URI using an
   HTTP redirection response, or by other means available to it via the
   end user's user-agent.

3.4.1.1.1.  End User Grants Access

   If the end user authorizes the access request, the authorization
   server generates a verification code and associates it with the
   client identifier and callback URI.  The authorization server
   constructs the request URI by adding the following parameters to the
   query component of callback URI provided by the client:

   code
         REQUIRED.  The verification code generated by the authorization
         server.





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 12]

Internet-Draft                  OAuth 2.0                     April 2010


   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   For example, the server redirects the end user's user-agent by
   sending the following HTTP response:

     HTTP/1.1 302 Found
     Location: https://client.example.com/cb?code=i1WsRn1uB1


   In turn, the end user's user-agent makes the following HTTPS "GET"
   request:

     GET /cb?code=i1WsRn1uB1 HTTP/1.1
     Host: client.example.com


3.4.1.1.2.  End User Denies Access

   If the end user denied the access request, the authorization server
   constructs the request URI by adding the following parameters to the
   query component of callback URI provided by the client:

   error
         REQUIRED.  The parameter value MUST be set to "user_denied"
         (case sensitive).

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   For example, the authorization server directs the client to make the
   following HTTP request:

     GET /cb?error=user_denied HTTP/1.1
     Host: client.example.com


   The authorization flow concludes unsuccessfully.

3.4.1.2.  Client Requests Access Token

   The client obtains an access token from the authorization server by
   making an HTTP "POST" request to the authorization endpoint.  The
   client constructs a request URI by adding the following REQUIRED



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 13]

Internet-Draft                  OAuth 2.0                     April 2010


   parameters to the request:

   type
         The parameter value MUST be set to "web_callback_token_request"
         (case sensitive).

   client_id
         The client identifier as described in Section 3.3.

   client_secret
         The client secret as described in Section 3.3.

   code
         The verification code received from the authorization server.

   callback
         The callback URI used in the initial request.

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     POST /access_token HTTP/1.1
     Host: server.example.com

     type=web_callback_token_request&client_id=s6BhdRkqt3&
     client_secret=gX1fBat3bV&code=i1WsRn1uB1&
     callback=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb


   The authorization server MUST verify that the verification code,
   client identity, client secret, and callback URI are all valid and
   match its stored association.  If the request is valid, the
   authorization server issues an access token and delivers it to the
   client in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).

   The response contains the following parameters:

   access_token
         REQUIRED.  The access token issued by the authorization server.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.






Hammer-Lahav, et al.     Expires October 9, 2010               [Page 14]

Internet-Draft                  OAuth 2.0                     April 2010


   refresh_token
         OPTIONAL.  The refresh token used to obtain new access tokens
         using the same end user access grant as described in Section 4.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=SlAV32hkKG&refresh_token=8xLOxBtZp8&expires_in=3600


   The authorization server MUST retain the scope, duration, and other
   access attributes approved by the end user, and enforce these
   restrictions when receiving a protected resource request made with
   the token issued.

   If the request is invalid, the authorization server returns an error
   message in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424] with a 400 status code (Bad Request).

   The response contains the following parameter:

   error_reason
         OPTIONAL.  The parameter value MUST be set to either
         "callback_mismatch" or "expired_verification_code" (case
         sensitive).

   For example:

     HTTP/1.1 400 Bad Request

     error_reason=expired_verification_code


3.4.2.  User-Agent Flow

   The user-agent flow is a user delegation flow suitable for client
   applications residing in a user-agent, typically implemented in a
   browser using a scripting language such as JavaScript.  The client is
   capable of interacting with the end user's user-agent but is
   incapable of receiving callback requests from the server (incapable
   of acting as an HTTP server).

   Instead of receiving callbacks, the client requests the authorization
   server to redirect the user-agent to another web server or local
   resource accessible to the browser which is capable of extracting the



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 15]

Internet-Draft                  OAuth 2.0                     April 2010


   access token from the response and passing it to the client.

   This browser client flow does not utilize the client secret since the
   client code resides on the end user's computer or device which makes
   the client secret accessible and exploitable.  Because the client is
   incapable of receiving callbacks, the access token is encoded into
   the redirection URI which exposes it to the end user and other
   applications residing on the computer or device.

          +----------+          Client Identifier     +----------------+
          |          |>---(A)-- & Redirection URI --->|                |
          |          |                                |                |
   End <--+  -  -  - +----(B)-- User authenticates -->|  Authorization |
   User   |          |                                |     Server     |
          |          |<---(C)-- Redirection URI -----<|                |
          |  Client  |         with Access Token      |                |
          |    in    |            in Fragment         +----------------+
          |  Browser |
          |          |                                +----------------+
          |          |>---(D)-- Redirection URI ----->|                |
          |          |          without Fragment      |   Web Server   |
          |          |                                |   with Client  |
          |    (F)   |<---(E)-- Web Page with -------<|    Resource    |
          |  Access  |             Script             |                |
          |   Token  |                                +----------------+
          +----------+


                                 Figure 4

   The user-agent flow illustrated in Figure 4 includes the following
   steps:

   (A)  The client sends the user-agent to the authorization server and
        includes its client credentials and redirection URI in the
        request.

   (B)  The authorization server authenticates the end user (via the
        user-agent) and prompts the end user to grant of deny the
        client's access request.

   (C)  Assuming the end user granted access, the authorization server
        redirects the user-agent to the redirection URI provided
        earlier.  The redirection URI includes the access token in the
        URI fragment.






Hammer-Lahav, et al.     Expires October 9, 2010               [Page 16]

Internet-Draft                  OAuth 2.0                     April 2010


   (D)  The user-agent follows the redirection instructions by making a
        request to the web server which does not include the fragment.
        The user-agent retains the fragment information locally.

   (E)  The web server returns a web page containing a script capable of
        extracting the access token from the URI fragment retained by
        the user-agent.

   (F)  The user-agent executes the script provided by the web server
        which extracts the access token and passes it to the client.

3.4.2.1.  Client Requests Access

   In order for the end user to grant the client access, the client
   sends the end user to the authorization server.  The client
   constructs the request URI by adding the following URI query
   parameters to the user authorization endpoint URI:

   type
         REQUIRED.  The parameter value MUST be set to
         "web_client_request" (case sensitive).

   client_id
         REQUIRED.  The client identifier as described in Section 3.3.

   redirection
         An absolute URI to which the authorization server will redirect
         the user-agent to when the end user authorization step is
         completed.  The authorization server SOULD require the client
         to pre-register their redirection URI.  The redirection URI
         MUST NOT includes a query or a fragment components as defined
         by [RFC3986] section 3.  REQUIRED unless a redirection URI has
         been established between the client and authorization server
         via other means.

   state
         An OPTIONAL opaque value used by the client to maintain state
         between the request and redirection.

   The client directs the end user to the constructed URI using an HTTP
   redirection response, or by other means available to it via the end
   user's user-agent.  The request MUST use the HTTP "GET" method.

   For example, the client directs the resource owner's user-agent to
   make the following HTTPS request (line breaks are for display
   purposes only):





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 17]

Internet-Draft                  OAuth 2.0                     April 2010


     GET /user_authorization?type=flow_web_client&client_id=s6BhdRkqt3&
         redirection=https%3A%2F%2FEexample%2Ecom%2Frd HTTP/1.1
     Host: server.example.com


   If the client has previously registered a redirection URI with the
   authorization server, the authorization server MUST verify that the
   redirection URI received matches the registered URI associated with
   the client identifier.

   The way in which the server authenticates the end user (e.g. username
   and password login, OpenID, session cookies) and in which the server
   obtains the end user's authorization, including whether it uses a
   secure channel such as TLS/SSL, is beyond the scope of this
   specification.  However, the server MUST first verify the identity of
   the end user.

   After receiving (or establishing via other means) an authorization
   decision from the resource owner, the authorization server sends the
   end user's user-agent to the provided client redirection URI using an
   HTTP redirection response.

3.4.2.1.1.  End User Grants Access

   If the end user authorizes the access request, the authorization
   server issues an access token and delivers it to the client by adding
   the following parameters, using the
   "application/x-www-form-urlencoded" format as defined by
   [W3C.REC-html40-19980424], to the redirection URI fragment:

   access_token
         REQUIRED.  The access token.

   expires_in
         OPTIONAL.  The duration in seconds of the access token
         lifetime.

   refresh_token
         OPTIONAL.  The refresh token.

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.







Hammer-Lahav, et al.     Expires October 9, 2010               [Page 18]

Internet-Draft                  OAuth 2.0                     April 2010


   For example, the server redirects the end user's user-agent by
   sending the following HTTP response:

    HTTP/1.1 302 Found
    Location: http://example.com/rd#access_token=FJQbwq9&expires_in=3600


3.4.2.1.2.  End User Denies Access

   If the end user denied the access request, the authorization server
   responds to the client by adding the following parameters, using the
   "application/x-www-form-urlencoded" format as defined by
   [W3C.REC-html40-19980424], to the redirection URI fragment:

   error
         REQUIRED.  The parameter value MUST be set to "user_denied"
         (case sensitive).

   state
         REQUIRED if the "state" parameter was present in the client
         authorization request.  Set the the exact value received from
         the client.

   For example, the authorization server responds with the following:

     HTTP/1.1 302 Found
     Location: http://example.com/rd#error=user_denied


   The authorization flow concludes unsuccessfully.  To extract the
   error message, the client follows the steps described in
   Section 3.4.2.2.

3.4.2.2.  Client Extracts Access Token

   The user-agent follows the authorization server redirection response
   by making an HTTP "GET" request to the URI received in the "Location"
   HTTP response header.  The user-agent SHALL NOT include the fragment
   component with the request.

   For example, the user-agent makes the following HTTP "GET" request in
   response to the redirection directive received from the authorization
   server:

     GET /rd HTTP/1.1
     Host: example.com





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 19]

Internet-Draft                  OAuth 2.0                     April 2010


   The HTTP response to the redirection request returns a web page
   (typically an HTML page with an embedded script) capable of accessing
   the full redirection URI including the fragment retained by the user-
   agent, and extracting the access token (and other parameters)
   contained in the fragment.

3.4.3.  Device Flow

   The Device Flow is suitable when the client is a device which does
   not have an easy data-entry method (e.g. game consoles or
   entertainment centers), but where the end-user has access to a
   separate computer with simple data-entry methods (e.g. their home
   computer, a laptop or a smartphone).

   Prior to making a request using this flow, the client MUST have
   obtained a client identifier and access token request endpoint URI
   from the authorization server.

   The client constructs an HTTP 'GET' request to the access token
   request endpoint and includes the following REQUIRED parameters:

   type
         The parameter value MUST be set to 'flow_device' (case
         sensitive).

   client_id
         The client identifier.

   Since the request results in the transmission of temporary plain text
   credentials in the HTTP response, the authorization server MUST
   require the use of a transport-layer mechanism such as TLS or SSL (or
   a secure channel with equivalent protections).

   For example, the client makes the following HTTPS request:

     GET /access_token?client_id=s6BhdRkqt3&type=flow_device HTTP/1.1
     Host: server.example.com


   Upon receiving an authorization request by the client, the
   authorization server generates a device verification code and a user
   verification code.  These are included in the HTTP response body
   using the 'application/x-www-form-urlencoded' content type as defined
   by [W3C.REC-html40-19980424] with a 200 status code (OK).  The
   response contains the following REQUIRED parameters:






Hammer-Lahav, et al.     Expires October 9, 2010               [Page 20]

Internet-Draft                  OAuth 2.0                     April 2010


   device_code
         The device verification code.

   user_code
         The user verification code.

   verification_uri
         The user verification URI on the authorization server.

   The authorization server MAY also include the following parameters:

   expires_in
         The duration in seconds of the access token lifetime.

   verification_rate_limit
         The minimum amount of time in seconds that the client SHOULD
         wait between polling requests to the device authorization URI.

   For example (line breaks are for display purposes only):

    HTTP/1.1 200 OK
    Content-Type: application/x-www-form-urlencoded

    device_code=74tq5miHKB&user_code=94248&verification_uri=http%3A%2F%2
    Fwww%2Eexample%2Ecom%2Fdevice&verification_rate_limit=3


   The client MUST display the user verification URI and the user
   verification code to the end-user, instruct them to visit the user
   verification URI in a web browser, and to enter the user verification
   token upon doing so (a user authorization request).

   The way in which the authorization server handles the user
   authorization request, including whether it uses a secure channel
   such as TLS/SSL is beyond the scope of this specification.  However,
   the server MUST first verify the identity of the resource owner.
   After doing so, the server MUST prompt the end-user to enter the user
   verification code.

   The authorization server MUST verify that the user verification code
   is valid and MAY verify that the client is authorized to use this
   flow.  If the request is authorized, the authorization server directs
   the end-user to go back to the client device and follow its
   instructions.

   The client MAY have an interface element (such as a button) that the
   end-user interacts with to communicate that they have finished the
   authorization process.  The client MAY initiate the following request



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 21]

Internet-Draft                  OAuth 2.0                     April 2010


   at an arbitrary but reasonable interval in order to create a more
   responsive user experience though MUST NOT exceed the verification
   rate limit if one is specified.  The client MUST either poll or have
   an interface element, or both.

   The client constructs an HTTP 'GET' request to the access token
   request endpoint and includes the following REQUIRED parameters:

   type
         The parameter value MUST be set to 'flow_device' (case
         sensitive).

   client_id
         The client identifier.

   device_verification_code
         The device verification code.

   Since the request results in the transmission of plain text
   credentials in the HTTP response, the authorization server MUST
   require the use of a transport-layer mechanism such as TLS or SSL (or
   a secure channel with equivalent protections).

   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

     GET /access_token?client_id=s6BhdRkqt3&device_verification_code=J2v
         C42OifV HTTP/1.1
     Host: server.example.com


   If the request is authorized, the access token is included in the
   HTTP response body using the 'application/x-www-form-urlencoded'
   content type as defined by [W3C.REC-html40-19980424] with a 200
   status code (OK).  The response contains the following REQUIRED
   parameter:

   access_token
         The access token.

   The authorization server MAY also include the following parameters:

   expires_in
         The duration in seconds of the access token lifetime.







Hammer-Lahav, et al.     Expires October 9, 2010               [Page 22]

Internet-Draft                  OAuth 2.0                     April 2010


   refresh_token
         The refresh token.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8&expires_in=600


   The authorization server must retain the scope, duration, and other
   attributes approved by the resource owner, and enforce these
   restrictions when receiving a client request made with the tokens
   issued.

   Once the client receives and stores the token credentials, it can
   proceed to access protected resources on behalf of the resource owner
   by making authenticated requests (Section 5) using the access token
   received.  Alternatively, it can refresh the access token and request
   an access secret to use in the signature flow (Section 4).

   If the authorization server is unable to issue an access token to the
   client, the HTTP response body uses the 'application/
   x-www-form-urlencoded' content type as defined by
   [W3C.REC-html40-19980424] with a 401 status code (Unauthorized).  The
   response contains the following REQUIRED parameter:

   error_reason
         Value must be one of 'authorization_declined',
         'authorization_pending', 'slow_down', or
         'verification_code_expired' (case sensitive).

   For example:

     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='example'

     error_reason=authorization_pending


3.5.  End User Credentials Flows

3.5.1.  Username and Password Flow

   This flow is used when the authorization server generally trusts the
   client to temporarily collect the end-user's username and password
   and it is impossible to use one of the other authorization flows.



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 23]

Internet-Draft                  OAuth 2.0                     April 2010


   This flow enables a client to act on behalf of the resource owner
   without having to permanently store their username and password.
   This flow also enables clients who previously used username and
   password to perform a conversion to token based credentials.

   Prior to making a request using this flow, the client MUST have
   obtained a client identifier and access token request endpoint URI
   from the authorization server.  How the client prompts the resource
   owner for their username and password is beyond the scope of this
   specification.  The client must discard the resource owner's username
   and password once an access token has been obtained.

   Because the end-user's username and password flows through the
   client, it is RECOMMENDED that authorization servers only allow
   'trusted' clients to have access to this flow; it is RECOMMENDED
   that, by default, a client does not have access to this flow, and it
   must have its abilities elevated somehow.  In the case of allowing a
   client to convert usernames and passwords to tokens, it is
   RECOMMENDED that a client only be given access to this flow for a set
   time duration.  The method by which to elevate permissions is out of
   scope for this document.

   The client constructs an HTTP 'POST' request to the access token
   request endpoint and includes the following REQUIRED parameters:

   type
         The parameter value MUST be set to 'flow_username_password'
         (case sensitive).

   client_id
         The client identifier.

   username
         The resource owner's username.

   password
         The resource owner's password.

   Since the request results in the transmission of plain text
   credentials in both the HTTP request and response, the authorization
   server MUST require the use of a transport-layer mechanism such as
   TLS or SSL (or a secure channel with equivalent protections).









Hammer-Lahav, et al.     Expires October 9, 2010               [Page 24]

Internet-Draft                  OAuth 2.0                     April 2010


   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only):

   POST /access_token HTTP/1.1
   Host: server.example.com

   client_id=s6BhdRkqt3&username=daveman692&password=1password&type=flow
   _username_password


   The authorization server MUST verify that the resource owner's
   credentials are accurate and MAY verify that the client is authorized
   to use this flow.  If the request is authorized, the access token is
   included in the HTTP response body using the 'application/
   x-www-form-urlencoded' content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).

   The response contains the following REQUIRED parameter:

   access_token
         The access token.

   The authorization server MAY also include the following parameters:

   expires_in
         The duration in seconds of the access token lifetime.

   refresh_token
         The refresh token.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8&refresh_token=gO3CHNqpH8


   The authorization server must retain the scope, duration, and other
   attributes approved by the resource owner, and enforce these
   restrictions when receiving a client request made with the tokens
   issued.

   Once the client receives and stores the token credentials, it can
   proceed to access protected resources on behalf of the resource owner
   by making authenticated requests (Section 5) using the access token
   received.  Alternatively, it can refresh the access token and request
   an access secret to use in the signature flow (Section 4).



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 25]

Internet-Draft                  OAuth 2.0                     April 2010


   If the request fails verification, the authorization server SHOULD
   respond with the appropriate HTTP response status code.  The
   authorization server MAY include further details about why the
   request was rejected in the response body.

   For example:

     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='example'


3.6.  Autonomous Client Flows

3.6.1.  Client Credentials Flow

   This flow is suitable when the client acts autonomously in seeking
   access and is thus not accessing protected resources within the
   context of a given end-user.  For example, when a client is accessing
   non-private data or modifying data about itself.  This flow SHOULD
   NOT be used when the client is acting on behalf of an end-user.

   Prior to making a request using this flow, the client MUST have
   obtained a client identifier, client secret, and access token request
   endpoint URI from the authorization server.

   The client constructs an HTTP 'POST' request to the access token
   request endpoint and includes the following REQUIRED parameters:

   type
         The parameter value MUST be set to 'flow_client' (case
         sensitive).

   client_id
         The client identifier.

   client_secret
         The client secret.

   Since the request results in the transmission of plain text
   credentials in both the HTTP request and response, the authorization
   server MUST require the use of a transport-layer mechanism such as
   TLS or SSL (or a secure channel with equivalent protections).









Hammer-Lahav, et al.     Expires October 9, 2010               [Page 26]

Internet-Draft                  OAuth 2.0                     April 2010


   For example, the client makes the following HTTPS request:

     POST /access_token HTTP/1.1
     Host: server.example.com

     client_id=s6BhdRkqt3&client_secret=8eSEIpnqmM&type=flow_client


   The authorization server MUST verify that the resource owner has
   authorized the provisioning of an access token to the client.  If the
   request is authorized, the access token is included in the HTTP
   response body using the 'application/x-www-form-urlencoded' content
   type as defined by [W3C.REC-html40-19980424] with a 200 status code
   (OK).

   The response contains the following REQUIRED parameter:

   access_token
         The access token.

   The authorization server MAY also include the following parameters:

   expires_in
         The duration in seconds of the access token lifetime.

   refresh_token
         The refresh token.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=FJQbwq9OD8&refresh_token=gO3CHNqpH8


   The authorization server must retain the scope, duration, and other
   attributes approved by the resource owner, and enforce these
   restrictions when receiving a client request made with the tokens
   issued.

   Once the client receives and stores the token credentials, it can
   proceed to access protected resources on behalf of the resource owner
   by making authenticated requests (Section 5) using the access token
   received.  Alternatively, it can refresh the access token and request
   an access secret to use in the signature flow (Section 4).

   If the request fails verification, the authorization server SHOULD



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 27]

Internet-Draft                  OAuth 2.0                     April 2010


   respond with the appropriate HTTP response status code.  The
   authorization server MAY include further details about why the
   request was rejected in the response body.

   For example:

     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='example'


3.6.2.  Assertion Flow

   The assertion flow requires the client to obtain a assertion such as
   a SAML [OASIS.saml-core-2.0-os] assertion from an assertion issuer
   prior to initiating this flow.  The process in which the assertion is
   obtained is defined by the assertion issuer and the authorization
   server, and is beyond the scope of this specification.

   The client makes an HTTPS request to the authorization endpoint using
   POST.  The request MUST contains the following parameters:

   assertion_format
      The format of the assertion as defined by the authorization
      server.

   assertion
      The assertion.

   If successful, the authorization server returns an HTTP 200 response
   code (OK) with the access token in the response body.  The response
   body contains the following parameters:

   access_token
      REQUIRED.  The Access Token.

   expires_in
      OPTIONAL.  The duration in seconds of the access token lifetime.

   If the assertion is not valid, the authorization server MUST respond
   with an HTTP 401 (Unauthorized) response code.  The Client MUST
   obtain a new valid assertion before retrying the request.

   Authorization servers SHOULD issue access tokens with a limited
   lifetime and require clients to refresh them by requesting a new
   access token using the same assertion if it is still valid.
   Otherwise the client MUST obtain a new valid assertion.





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 28]

Internet-Draft                  OAuth 2.0                     April 2010


4.  Refreshing an Access Token

   Authorization servers MAY issue access tokens that expire and thus
   require clients to refresh them.  A client determines that an access
   token needs refreshing either by using the access token's expiration
   information or upon receiving the HTTP 401 Unauthorized response when
   accessing protected resources per Section 5.  A client will also
   refresh a token if it wishes to obtain a corresponding access token
   secret for use when accessing protected resources via signatures
   (Section 5.2).

   Prior to making a request using this flow, the client MUST have
   obtained a client identifier, client secret, and access token request
   endpoint URI from the authorization server.

   The client constructs an HTTP 'POST' request to the access token
   request endpoint and includes the following REQUIRED parameters:

   type
         The parameter value MUST be set to 'refresh_token' (case
         sensitive).

   client_id
         The client identifier.

   refresh_token
         The refresh token associated with the access token to be
         refreshed.

   If the client has access to the client secret, the following
   parameter SHOULD also be added to the request:

   client_secret
         The client secret.

   If the client wishes to obtain an access token for use when accessing
   protected resources via signatures, the following parameters MUST
   also be added to the request:

   want_secret
         The parameter value MUST be set to 'true' (case sensitive).

   Since the request results in the transmission of plain text
   credentials in both the HTTP request and response, the authorization
   server MUST require the use of a transport-layer mechanism such as
   TLS or SSL (or a secure channel with equivalent protections).





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 29]

Internet-Draft                  OAuth 2.0                     April 2010


   For example, the client makes the following HTTPS request:


   POST /refresh_token HTTP/1.1
   Host: server.example.com

   client_id=s6BhdRkqt3&client_secret=8eSEIpnqmM&refresh_token=n4E9O119d


   The authorization server MUST verify that the resource owner has
   still authorized the provisioning of an access token to the client
   and that the refresh token is valid.  If the request is authorized,
   the access token is included in the HTTP response body using the
   'application/x-www-form-urlencoded' content type as defined by
   [W3C.REC-html40-19980424] with a 200 status code (OK).

   If an access token secret is included in the response, the protected
   resource MUST NOT allow the use of the corresponding access token
   without its secret (Section 5.1).

   The response contains the following REQUIRED parameters:

   access_token
         The access token.

   The authorization server MAY also include the following parameters:

   expires_in
         The duration in seconds of the access token lifetime.

   access_token_secret
         A corresponding access token secret if the client requested
         one.

   signature_methods
         A comma-separated list of signature methods supported by the
         protected resource, ordered by preference.  REQUIRED if an
         access token secret is being returned.  Possible values include
         'HMAC-SHA1' and 'HMAC-SHA256' (case-sensitive) as well as any
         other values defined by extensions to this protocol.

   For example (line breaks are for display purposes only):


     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     access_token=8F44J2HGMl



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 30]

Internet-Draft                  OAuth 2.0                     April 2010


   HTTP/1.1 200 OK
   Content-Type: application/x-www-form-urlencoded

   access_token=8F44J2HGMl&access_token_secret=h3B2Tw1CHw&signature_meth
   ods=HMAC-SHA1,HMAC-SHA256


   If the request fails verification, the authorization server SHOULD
   respond with the appropriate HTTP response status code.  The
   authorization server MAY include further details about why the
   request was rejected in the response body.

   For example:


     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='example'



5.  Accessing a Protected Resource

   OAuth 2.0 supports the ability for clients to make protected resource
   requests by using TLS/SSL (Section 5.1) and/or by signing their HTTP
   request with shared secrets (Section 5.2).  Protected resources MUST
   support clients making authenticated requests via TLS/SSL
   (Section 5.1).  Protected resources MAY also choose to also support
   signatures (Section 5.2), and it is RECOMMENDED that clients make
   signature-based authenticated requests via TLS/SSL.

   If a client includes more than one access token within the request,
   the protected resource MUST respond with a HTTP 400 'Bad Request'
   error code.

5.1.  Bearer Token Requests

   When using TLS/SSL, clients MUST present an access token to
   authenticate to a protected resource.  Use of the HTTP
   'Authorization' header field as defined by [RFC2617] is RECOMMENDED,
   since HTTP implementations are aware that this header has special
   security properties and may require special treatment in caches and
   logs.  Protected resources SHOULD take precautions to ensure that
   access tokens are not inadvertently logged or captured.  It is
   RECOMMENDED that clients verify the authenticity of the certificate
   provided when establishing a TLS/SSL connection to the protected
   resource.





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 31]

Internet-Draft                  OAuth 2.0                     April 2010


5.1.1.  HTTP Header

   The protected resource SHOULD allow clients to make authenticated
   requests by including the access token in the HTTP 'Authorization'
   header.  Prior to making a request, the client MUST have obtained a
   valid access token and the API request endpoint URI.

   The client constructs a HTTP request to the API request endpoint URI
   and includes the HTTP 'Authorization' header field with the auth-
   scheme name set to 'OAuth' (case-insensitive).

   Since the request results in the transmission of plain text
   credentials in the HTTP request, the protected resource MUST require
   the use of a transport-layer mechanism such as TLS or SSL (or a
   secure channel with equivalent protections).

   For example, the client makes the following HTTPS request:


     GET /user/daveman692.json HTTP/1.1
     Host: api.example.com
     Authorization: OAuth access_token='vF9dft4qmT'


   Note that per [RFC2617] section 1.2 the following request is also
   valid:


     GET /user/daveman692.json HTTP/1.1
     Host: api.example.com
     Authorization:  OAuth  access_token = vF9dft4qmT


   If the request fails verification, the protected resource SHOULD
   respond with the appropriate HTTP response status code.  The
   protected resource MAY include further details about why the request
   was rejected in the response body or headers.

   For example:


     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='https://api.example.com/'








Hammer-Lahav, et al.     Expires October 9, 2010               [Page 32]

Internet-Draft                  OAuth 2.0                     April 2010


5.1.2.  URI Query Parameter

   The protected resource MAY allow clients to make authenticated
   requests by including the access token as a URI query parameter.
   Prior to making a request, the client MUST have obtained a valid
   access token and the API request endpoint URI.  While the following
   examples use the HTTP 'GET' method, there's nothing limiting a client
   to use query parameters with other HTTP methods.

   The client constructs the request URI by adding the following
   REQUIRED query parameter to the API request endpoint:

   access_token
         The access token.

   Since the request results in the transmission of plain text
   credentials in the HTTP request, the protected resource MUST require
   the use of a transport-layer mechanism such as TLS or SSL (or a
   secure channel with equivalent protections).

   For example, the client makes the following HTTPS request:


     GET /user/daveman692.json?access_token=vF9dft4qmT HTTP/1.1
     Host: api.example.com


   If the request fails verification, the protected resource SHOULD
   respond with the appropriate HTTP response status code.  The
   protected resource MAY include further details about why the request
   was rejected in the response body.

   For example:


     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='https://api.example.com/'


5.1.3.  Form-Encoded Body Parameter

   The protected resource MAY allow clients to make authenticated
   requests by including the access token as a parameter in the body of
   a HTTP request.  Prior to making a request, the client MUST have
   obtained a valid access token and the API request endpoint URI.

   The client constructs an HTTP 'POST', 'PUT', or 'DELETE' request to
   the API request endpoint and includes the following REQUIRED



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 33]

Internet-Draft                  OAuth 2.0                     April 2010


   parameter:

   access_token
         The access token.

   Since the request results in the transmission of plain text
   credentials in the HTTP request, the protected resource MUST require
   the use of a transport-layer mechanism such as TLS or SSL (or a
   secure channel with equivalent protections).

   For example, the client makes the following HTTPS request:


     POST /blog/entry HTTP/1.1
     Host: api.example.com

     access_token=vF9dft4qmT


   If the request fails verification, the protected resource SHOULD
   respond with the appropriate HTTP response status code.  The
   protected resource MAY include further details about why the request
   was rejected in the response body.

   For example:


     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='https://api.example.com/'


5.2.  Signed Requests

   When using signatures, clients MAY use TLS/SSL as the transport to
   authenticate to a protected resource.

   The following parameters are obtained (or computed) by clients in
   order to make protected resource requests:

   access_token
         The access token obtained through a refresh token call with the
         'want_secret' parameter included (Section 4).

   signature_method
         The signature method used by the client to sign the request.
         The method MUST be one of those listed in the
         'signature_methods' parameter returned with the access token
         secret (Section 4).



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 34]

Internet-Draft                  OAuth 2.0                     April 2010


   timestamp
         Unless otherwise specified by the server's documentation, the
         timestamp is expressed in the number of seconds since January
         1, 1970 00:00:00 GMT.  It MUST be a positive integer.

   nonce
         A nonce is a random string, uniquely generated by the client to
         allow the server to verify that a request has never been made
         before and helps prevent replay attacks when requests are made
         over a non-secure channel.  The nonce value MUST be unique
         across all requests with the same timestamp and token
         combinations.

   signature
         The computed signature value ensuring the integrity of this
         request (Section 5.2.1).

   The protocol parameters are added to the request using the HTTP
   Header (Section 5.2.2).

   Construction of the signature base string follows the process
   detailed in section 3.4.1 of [I-D.hammer-oauth].

   For example the request:


     GET /user/daveman692.json?b5=%3D%25%3D&a3=a&c%40=&a2=r%20b HTTP/1.1
     Host: api.example.com
     Content-Type: application/x-www-form-urlencoded
     Authorization: OAuth
                    access_token='vF9dft4qmT',
                    signature_method='HMAC-SHA1',
                    timestamp='1268998408',
                    nonce='7d8f3e4a',

     c2&a3=2+q


   Is represented by the following signature base string (line breaks
   are for display purposes only):


   GET&amp;http%3A%2F%2Fapi.example.com%2Fuser%2Fdaveman692.json&amp;a2%
   3Dr%2520b%26a3%3D2%252Bq%26a3%3Da%26b5%3D%253D%2525%253D%26c%2540%3D%
   26c2%3D%26nonce%3D7d8f3e4a%26signature_method%3DHMAC-SHA1%26timestamp
   %3D1268998408%26access_token%3DvF9dft4qmT%26version%3D2.0





Hammer-Lahav, et al.     Expires October 9, 2010               [Page 35]

Internet-Draft                  OAuth 2.0                     April 2010


5.2.1.  Computing the signature

   The authorization server declares which signature methods it accepts
   via the 'signature_methods' returned as part of obtaining an access
   token secret (Section 4).  The client declares which signature method
   is used for this request via the 'signature_method' parameter.  It
   then generates a signature, and includes it in the 'signature'
   parameter.  The server verifies the signature as specified for each
   method.

   There is no mandate for a particular signature method as each
   implementation can have its own unique requirements.  Authorization
   servers are free to implement and document their own custom methods.

5.2.1.1.  HMAC-SHA1

   The 'HMAC-SHA1' signature method uses the HMAC-SHA1 signature
   algorithm as defined in [RFC2104]:

      digest = HMAC-SHA1 (key, text)

   The HMAC-SHA1 function variables are used in following way:

   text  is set to the value of the signature base string.

   key   is set to the access token secret.

   digest  is used to set the value of the 'signature' protocol
         parameter, after the result octet string is base64-encoded per
         section 6.8 of [RFC2045].

5.2.2.  Client Calls Protected Resource Using HTTP Headers

   The protected resource MAY allow clients to make authenticated
   requests by including the access token in the HTTP 'Authorization'
   header.  Prior to making a request, the client MUST have obtained a
   valid access token, a valid access token secret, and the API request
   endpoint URI.  It MUST have also constructed the signature base
   string and computed the signature (Section 5.2.1).

   The client constructs a HTTP request to the API request endpoint URI
   and includes the HTTP 'Authorization' header field with the auth-
   scheme name set to 'OAuth' (case-insensitive).  The protocol
   parameters and the signature computed in Section 5.2.1 are included
   in the Authorization header.






Hammer-Lahav, et al.     Expires October 9, 2010               [Page 36]

Internet-Draft                  OAuth 2.0                     April 2010


   For example, a valid request follows the form of:


     GET /user/daveman692.json?b5=%3D%25%3D&a3=a&c%40=&a2=r%20b HTTP/1.1
     Host: api.example.com
     Content-Type: application/x-www-form-urlencoded
     Authorization: OAuth
                    access_token='vF9dft4qmT',
                    signature_method='HMAC-SHA1',
                    timestamp='1268998408',
                    nonce='7d8f3e4a',
                    signature='hfVFpKvoKp5S6YaNIJ6ljuNYR6s%3D'

     c2&a3=2+q


   If the request fails verification, the protected resource SHOULD
   respond with the appropriate HTTP response status code.  The
   protected resource MAY include further details about why the request
   was rejected in the response body or headers.

   For example:


     HTTP/1.1 401 Authorization Required
     WWW-Authenticate: OAuth realm='Exmaple'



6.  The WWW-Authenticate Response Header

   A server receiving a request for a protected resource without a valid
   Authorization header field (Section 7) MUST respond with a 401 status
   code (Unauthorized), and includes at least one "WWW-Authenticate"
   header field including a token scheme challenge.

   The "WWW-Authenticate" header field uses the framework defined by
   [RFC2617] as follows:

    challenge       = "Token" RWS token-challenge

    token-challenge = realm
                      [ CS authz-uri ]
                      [ CS timestamp ]

    authz-uri       = "authorization-uri" "=" URI-Reference
    timestamp       = "timestamp" "=" <"> 1*DIGIT <">




Hammer-Lahav, et al.     Expires October 9, 2010               [Page 37]

Internet-Draft                  OAuth 2.0                     April 2010


    CS              = OWF "," OWF


6.1.  The 'realm' Attribute

6.2.  The 'authorization-uri' Attribute

6.3.  The 'timestamp' Attribute

   Signature-based and hash-based authentication methods use timestamps
   in combination with unique nonce values to protect against replay
   attacks when used over an insecure channel.

   The timestamp attribute is used by the server to publish its current
   time, enabling clients to synchronize their close with the server.
   The timestamp value is the current time expressed in the number of
   seconds since January 1, 1970 00:00:00 GMT, and MUST be a positive
   integer.

   To avoid the need to retain an infinite number of nonce values for
   future checks, servers MAY choose to restrict the time period after
   which a request with an old timestamp is rejected.  Servers applying
   such a restriction SHOULD provide their current time to the client
   either in every challenge or when a request fails due to a timestamp
   outside the allowed window.


7.  The Authorization Request Header

   A client making a request for a protected resource either directly,
   or in retrying a request after receiving a 401 status code
   (Unauthorized) with a token challenge, MUST include at least one
   "Authorization" header field including token scheme credentials.

   The "Authorization" header field uses the framework defined by
   [RFC2617] as follows:

    credentials    = "Token" RWS token-response

    token-response = token-id
                     [ CS nonce ]
                     [ CS timestamp ]
                     [ CS auth ]

    token-id         = "token" "=" <"> token <">
    nonce            = "nonce" "=" <"> token <">
    auth             = "signature" "=" <"> token <">




Hammer-Lahav, et al.     Expires October 9, 2010               [Page 38]

Internet-Draft                  OAuth 2.0                     April 2010


7.1.  The 'token' Attribute

   The value used to identify the set of token credentials used by the
   client to authenticate.  The token identifier can be an opaque string
   or use a well-defined internal structure.

7.2.  The 'nonce' Attribute

   A random string, uniquely generated by the client to allow the server
   to verify that a request has never been made before and helps prevent
   replay attacks when requests are made over a non-secure channel.  The
   nonce value MUST be unique across all requests with the same
   timestamp and token combinations.

7.3.  The 'timestamp' Attribute

   The timestamp value is the current time expressed in the number of
   seconds since January 1, 1970 00:00:00 GMT, and MUST be a positive
   integer.

7.4.  The 'signature' Attribute

   The output of the authentication method function after applying it to
   the selected coverage.


8.  Security Considerations

   [[ Todo ]]


9.  IANA Considerations

   [[ Not Yet ]]


10.  Acknowledgements

   [[ Add OAuth 1.0a authors + WG contributors ]]


Appendix A.  Differences from OAuth 1.0a


Appendix B.  Document History

   [[ to be removed by RFC editor before publication as an RFC ]]




Hammer-Lahav, et al.     Expires October 9, 2010               [Page 39]

Internet-Draft                  OAuth 2.0                     April 2010


   -00

   o  Initial draft based on a combination of WRAP and OAuth 1.0a.


11.  References

11.1.  Normative References

   [I-D.ietf-httpbis-p1-messaging]
              Fielding, R., Gettys, J., Mogul, J., Nielsen, H.,
              Masinter, L., Leach, P., Berners-Lee, T., and J. Reschke,
              "HTTP/1.1, part 1: URIs, Connections, and Message
              Parsing", draft-ietf-httpbis-p1-messaging-09 (work in
              progress), March 2010.

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, November 1996.

   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
              Hashing for Message Authentication", RFC 2104,
              February 1997.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.

   [RFC3447]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", RFC 3447, February 2003.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, November 2003.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.



Hammer-Lahav, et al.     Expires October 9, 2010               [Page 40]

Internet-Draft                  OAuth 2.0                     April 2010


   [W3C.REC-html40-19980424]
              Hors, A., Jacobs, I., and D. Raggett, "HTML 4.0
              Specification", World Wide Web Consortium
              Recommendation REC-html40-19980424, April 1998,
              <http://www.w3.org/TR/1998/REC-html40-19980424>.

11.2.  Informative References

   [I-D.hammer-oauth]
              Hammer-Lahav, E., "The OAuth 1.0 Protocol",
              draft-hammer-oauth-10 (work in progress), February 2010.

   [I-D.hardt-oauth]
              Hardt, D., Tom, A., Eaton, B., and Y. Goland, "OAuth Web
              Resource Authorization Profiles", draft-hardt-oauth-01
              (work in progress), January 2010.

   [OASIS.saml-core-2.0-os]
              Cantor, S., Kemp, J., Philpott, R., and E. Maler,
              "Assertions and Protocol for the OASIS Security Assertion
              Markup Language (SAML) V2.0", OASIS Standard saml-core-
              2.0-os, March 2005.


Authors' Addresses

   Eran Hammer-Lahav (editor)

   Email: eran@hueniverse.com


   David Recordon
   Facebook

   Email: davidrecordon@facebook.com
   URI:   http://www.davidrecordon.com/


   Dick Hardt

   Email: dick.hardt@gmail.com
   URI:   http://dickhardt.org/









Hammer-Lahav, et al.     Expires October 9, 2010               [Page 41]


